android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.d:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.e:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.g:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.h:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.i:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.j:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.k:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.l:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.m:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.n:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.o:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.r:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.s:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.t:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.u:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.v:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.w:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.y:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.z:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.aa:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ab:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ac:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ad:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ae:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.af:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.ag:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ah:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ai:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aj:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ak:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.al:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.am:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.an:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ao:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ap:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.aq:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ar:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.as:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.at:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.au:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.av:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.aw:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.a:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.b:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.c:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.d:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.e:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.f:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.g:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.h:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.i:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.j:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.k:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.m:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.n:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.o:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.q:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.r:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.s:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.t:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.v:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.w:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.x:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.y:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> d
    void ensureMotionHistorySizeForId(int) -> e
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.z:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.aa:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.torusworks.android.db.PreferencePersister -> com.torusworks.a.a.a:
    int getInt(android.content.Context,java.lang.String,int) -> a
    boolean putInt(android.content.Context,java.lang.String,int) -> b
    java.lang.String getString(android.content.Context,java.lang.String,java.lang.String) -> a
    boolean putString(android.content.Context,java.lang.String,java.lang.String) -> b
    boolean getBoolean(android.content.Context,java.lang.String,boolean) -> a
    boolean putBoolean(android.content.Context,java.lang.String,boolean) -> b
    java.lang.String[] getArray(android.content.Context,java.lang.String,java.lang.String) -> c
    boolean putInArray(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> a
com.torusworks.android.shoutcast.OnFetchComplete -> com.torusworks.a.b.a:
    void handleFetchComplete(com.torusworks.android.shoutcast.StreamMetaDataReader) -> a
com.torusworks.android.shoutcast.StreamMetaDataReader -> com.torusworks.a.b.b:
    java.lang.StringBuilder rawHtmlResponse -> a
    java.lang.String responseBody -> b
    java.lang.String[] streamInfo -> c
    com.torusworks.android.shoutcast.OnFetchComplete onFetchComplete -> d
    java.lang.String streamUrl -> e
    java.lang.String fetchSevenHtml() -> a
    java.lang.String getArtistAndSong() -> b
    void setOnFetchComplete(com.torusworks.android.shoutcast.OnFetchComplete) -> a
    void run() -> run
com.torusworks.android.visualizers.AudioOutVisualizer -> com.torusworks.a.c.a:
    android.media.audiofx.Visualizer mVisualizer -> a
    int[] formattedVizData -> b
    byte[] vizBuffer -> c
    int DEFAULT_CAPTURE_SIZE -> d
    int[] getFormattedData(byte[]) -> a
    double getRms() -> a
    void release() -> b
com.torusworks.game.panel.GamePanel -> com.torusworks.b.a.a:
    void render(android.graphics.Canvas) -> a
    void update() -> a
    void setAvgFps(java.lang.String) -> setAvgFps
com.torusworks.game.panel.MainThread -> com.torusworks.b.a.b:
    java.lang.String TAG -> a
    java.text.DecimalFormat df -> b
    long lastStatusStore -> c
    long statusIntervalTimer -> d
    long totalFramesSkipped -> e
    long framesSkippedPerStatCycle -> f
    int frameCountPerStatCycle -> g
    long totalFrameCount -> h
    double[] fpsStore -> i
    long statsCount -> j
    double averageFps -> k
    android.view.SurfaceHolder surfaceHolder -> l
    com.torusworks.game.panel.GamePanel gamePanel -> m
    boolean running -> n
    void setRunning(boolean) -> a
    void run() -> run
    void storeStats() -> a
    void initTimingElements() -> b
com.torusworks.game.panel.SurfaceViewGamePanel -> com.torusworks.b.a.c:
    java.lang.String TAG -> a
    com.torusworks.game.panel.MainThread thread -> b
    com.torusworks.skroller.Skroller skroller -> c
    java.lang.String avgFps -> d
    void setAvgFps(java.lang.String) -> setAvgFps
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void render(android.graphics.Canvas) -> a
    void update() -> a
    void displayFps(android.graphics.Canvas,java.lang.String) -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
com.torusworks.scriptengine.JavaScriptEngine -> com.torusworks.c.a:
    org.mozilla.javascript.Context cx -> a
    org.mozilla.javascript.Scriptable scope -> b
    java.lang.String execute(java.lang.String) -> a
com.torusworks.skroller.MainActivity -> com.torusworks.skroller.MainActivity:
    int colorRed -> a
    int colorGreen -> b
    int colorBlue -> c
    void onCreate(android.os.Bundle) -> onCreate
    void setupHistory(int,java.lang.String,java.lang.String) -> a
    void updateColor() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onClick(android.view.View) -> onClick
    void launchSkrollerActivity() -> b
    void access$0(com.torusworks.skroller.MainActivity) -> a
    void access$1(com.torusworks.skroller.MainActivity,int) -> a
    void access$2(com.torusworks.skroller.MainActivity,int) -> b
    void access$3(com.torusworks.skroller.MainActivity,int) -> c
    void access$4(com.torusworks.skroller.MainActivity) -> b
com.torusworks.skroller.MainActivity$1 -> com.torusworks.skroller.a:
    com.torusworks.skroller.MainActivity this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.torusworks.skroller.MainActivity$2 -> com.torusworks.skroller.b:
    com.torusworks.skroller.MainActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
com.torusworks.skroller.MainActivity$3 -> com.torusworks.skroller.c:
    com.torusworks.skroller.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.torusworks.skroller.Skroller -> com.torusworks.skroller.d:
    java.lang.String TAG -> a
    boolean touched -> b
    com.torusworks.skroller.model.SkrollContent content -> c
    boolean clean_start -> d
    int idx -> e
    int pathOffsetX -> f
    com.torusworks.skroller.model.TorusVisualizer mVisualizer -> g
    android.view.SurfaceView view -> h
    int touchIdx -> i
    int touchX -> j
    com.torusworks.android.shoutcast.StreamMetaDataReader streamMetaDataReader -> k
    java.lang.String displayMessage -> l
    com.torusworks.scriptengine.JavaScriptEngine jse -> m
    java.lang.String lastDisplayMessage -> n
    android.graphics.Path pathBackText -> o
    android.graphics.Path pathFrontText -> p
    int lastHeight -> q
    boolean isTouched() -> a
    void setTouched(boolean,int) -> a
    void draw(android.graphics.Canvas) -> a
    void updateDisplayMesage() -> e
    void backgroundPollStreamInfo() -> b
    void update() -> c
    void handleActionDown(int,int) -> a
    void release() -> d
    void move(int,int) -> b
    void handleFetchComplete(com.torusworks.android.shoutcast.StreamMetaDataReader) -> a
com.torusworks.skroller.SkrollerActivity -> com.torusworks.skroller.SkrollerActivity:
    java.lang.String TAG -> b
    com.torusworks.skroller.model.TorusVisualizer mVisualizer -> c
    android.media.MediaPlayer mp -> d
    com.torusworks.skroller.model.SkrollContent content -> a
    int PERCENT_BUFFER -> e
    void onCreate(android.os.Bundle) -> onCreate
    void startStream() -> b
    void onDestroy() -> onDestroy
    void onStop() -> onStop
    void onStart() -> onStart
    void onRestart() -> onRestart
    void onResume() -> onResume
    void onPause() -> onPause
    java.lang.String access$0() -> a
com.torusworks.skroller.SkrollerActivity$1 -> com.torusworks.skroller.e:
    com.torusworks.skroller.SkrollerActivity this$0 -> a
    boolean onError(android.media.MediaPlayer,int,int) -> onError
com.torusworks.skroller.SkrollerActivity$2 -> com.torusworks.skroller.f:
    com.torusworks.skroller.SkrollerActivity this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.torusworks.skroller.SkrollerActivity$3 -> com.torusworks.skroller.g:
    com.torusworks.skroller.SkrollerActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.torusworks.skroller.SkrollerActivity$4 -> com.torusworks.skroller.h:
    com.torusworks.skroller.SkrollerActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.torusworks.skroller.model.SkrollContent -> com.torusworks.skroller.a.a:
    double velocity -> a
    java.lang.String message -> b
    int frontTextColor -> c
    int backTextColor -> d
    int frontTextAlpha -> e
    int backTextAlpha -> f
    double backTextRadiusMultiplier -> g
    java.lang.String streamURL -> h
    java.util.Queue messageQueue -> i
    void pushMessage(java.lang.String) -> a
    java.lang.String popMessage() -> a
    java.lang.String getStreamURL() -> b
    void setStreamURL(java.lang.String) -> b
    double getVelocity() -> c
    int getFrontTextColor() -> d
    void setFrontTextColor(int) -> a
    int getBackTextColor() -> e
    int getFrontTextAlpha() -> f
    int getBackTextAlpha() -> g
    java.lang.String getMessage() -> h
com.torusworks.skroller.model.TorusVisualizer -> com.torusworks.skroller.a.b:
    double getRms() -> a
    void release() -> b
org.mozilla.classfile.ClassFileField -> a.a.a.a:
    short itsNameIndex -> a
    short itsTypeIndex -> b
    short itsFlags -> c
    boolean itsHasAttributes -> d
    short itsAttr1 -> e
    short itsAttr2 -> f
    short itsAttr3 -> g
    int itsIndex -> h
    int write(byte[],int) -> a
    int getWriteSize() -> a
org.mozilla.classfile.ClassFileMethod -> a.a.a.b:
    java.lang.String itsName -> a
    java.lang.String itsType -> b
    short itsNameIndex -> c
    short itsTypeIndex -> d
    short itsFlags -> e
    byte[] itsCodeAttribute -> f
    void setCodeAttribute(byte[]) -> a
    int write(byte[],int) -> a
    int getWriteSize() -> a
    java.lang.String getName() -> b
    java.lang.String getType() -> c
    short getFlags() -> d
org.mozilla.classfile.ClassFileWriter -> a.a.a.c:
    int[] itsSuperBlockStarts -> a
    int itsSuperBlockStartsTop -> b
    org.mozilla.javascript.UintMap itsJumpFroms -> c
    int MajorVersion -> d
    int MinorVersion -> e
    boolean GenerateStackMap -> f
    java.lang.String generatedClassName -> g
    org.mozilla.classfile.ExceptionTableEntry[] itsExceptionTable -> h
    int itsExceptionTableTop -> i
    int[] itsLineNumberTable -> j
    int itsLineNumberTableTop -> k
    byte[] itsCodeBuffer -> l
    int itsCodeBufferTop -> m
    org.mozilla.classfile.ConstantPool itsConstantPool -> n
    org.mozilla.classfile.ClassFileMethod itsCurrentMethod -> o
    short itsStackTop -> p
    short itsMaxStack -> q
    short itsMaxLocals -> r
    org.mozilla.javascript.ObjArray itsMethods -> s
    org.mozilla.javascript.ObjArray itsFields -> t
    org.mozilla.javascript.ObjArray itsInterfaces -> u
    short itsFlags -> v
    short itsThisClassIndex -> w
    short itsSuperClassIndex -> x
    short itsSourceFileNameIndex -> y
    int[] itsLabelTable -> z
    int itsLabelTableTop -> A
    long[] itsFixupTable -> B
    int itsFixupTableTop -> C
    org.mozilla.javascript.ObjArray itsVarDescriptors -> D
    char[] tmpCharBuffer -> E
    java.lang.String getClassName() -> a
    void addInterface(java.lang.String) -> a
    java.lang.String getSlashedForm(java.lang.String) -> b
    java.lang.String classNameToSignature(java.lang.String) -> c
    void addField(java.lang.String,java.lang.String,short) -> a
    void addVariableDescriptor(java.lang.String,java.lang.String,int,int) -> a
    void startMethod(java.lang.String,java.lang.String,short) -> b
    void stopMethod(short) -> a
    void add(int) -> a
    void add(int,int) -> a
    void addLoadConstant(int) -> b
    void addLoadConstant(long) -> a
    void addLoadConstant(double) -> a
    void addLoadConstant(java.lang.String) -> d
    void add(int,java.lang.String) -> a
    void add(int,java.lang.String,java.lang.String,java.lang.String) -> a
    void addInvoke(int,java.lang.String,java.lang.String,java.lang.String) -> b
    void addPush(int) -> c
    void addPush(boolean) -> a
    void addPush(long) -> b
    void addPush(double) -> b
    void addPush(java.lang.String) -> e
    void addIStore(int) -> d
    void addDStore(int) -> e
    void addAStore(int) -> f
    void addILoad(int) -> g
    void addLLoad(int) -> h
    void addFLoad(int) -> i
    void addDLoad(int) -> j
    void addALoad(int) -> k
    void addLoadThis() -> b
    void xop(int,int,int) -> c
    int addTableSwitch(int,int) -> b
    void markTableSwitchDefault(int) -> l
    void markTableSwitchCase(int,int) -> c
    void markTableSwitchCase(int,int,int) -> a
    void setTableSwitchJump(int,int,int) -> b
    int acquireLabel() -> c
    void markLabel(int) -> m
    void markLabel(int,short) -> a
    void markHandler(int) -> n
    int getLabelPC(int) -> o
    void addLabelFixup(int,int) -> d
    void fixLabelGotos() -> g
    int getCurrentCodeOffset() -> d
    short getStackTop() -> e
    void setStackTop(short) -> b
    void adjustStackTop(int) -> p
    void addToCodeBuffer(int) -> u
    void addToCodeInt16(int) -> v
    int addReservedCodeSpace(int) -> w
    void addExceptionHandler(int,int,int,java.lang.String) -> a
    void addLineNumberEntry(short) -> c
    char arrayTypeToName(int) -> x
    java.lang.String classDescriptorToInternalName(java.lang.String) -> h
    java.lang.String descriptorToInternalName(java.lang.String) -> i
    int[] createInitialLocals() -> h
    int getWriteSize() -> i
    byte[] toByteArray() -> f
    int putInt64(long,byte[],int) -> a
    void badStack(int) -> y
    int sizeOfParameters(java.lang.String) -> j
    int putInt16(int,byte[],int) -> a
    int putInt32(int,byte[],int) -> b
    int opcodeLength(int,boolean) -> a
    int opcodeCount(int) -> q
    int stackChange(int) -> r
    char[] getCharBuffer(int) -> s
    void addSuperBlockStart(int) -> z
    void finalizeSuperBlockStarts() -> j
    int access$000(org.mozilla.classfile.ClassFileWriter) -> a
    int[] access$100(org.mozilla.classfile.ClassFileWriter) -> b
    int[] access$200(org.mozilla.classfile.ClassFileWriter) -> c
    int access$300(org.mozilla.classfile.ClassFileWriter) -> d
    int access$400(org.mozilla.classfile.ClassFileWriter) -> e
    org.mozilla.classfile.ExceptionTableEntry[] access$500(org.mozilla.classfile.ClassFileWriter) -> f
    org.mozilla.javascript.UintMap access$600(org.mozilla.classfile.ClassFileWriter) -> g
    byte[] access$700(org.mozilla.classfile.ClassFileWriter) -> h
    org.mozilla.classfile.ConstantPool access$800(org.mozilla.classfile.ClassFileWriter) -> i
    int access$410(org.mozilla.classfile.ClassFileWriter) -> j
    char access$900(int) -> t
    int access$1000(java.lang.String) -> f
    short access$1100(org.mozilla.classfile.ClassFileWriter) -> k
    java.lang.String access$1200(java.lang.String) -> g
    short access$1300(org.mozilla.classfile.ClassFileWriter) -> l
    short access$1400(org.mozilla.classfile.ClassFileWriter) -> m
org.mozilla.classfile.ClassFileWriter$ClassFileFormatException -> a.a.a.d:
org.mozilla.classfile.ClassFileWriter$StackMapTable -> a.a.a.e:
    int[] locals -> b
    int localsTop -> c
    int[] stack -> d
    int stackTop -> e
    org.mozilla.classfile.SuperBlock[] workList -> f
    int workListTop -> g
    org.mozilla.classfile.SuperBlock[] superBlocks -> h
    org.mozilla.classfile.SuperBlock[] superBlockDeps -> i
    byte[] rawStackMap -> j
    int rawStackMapTop -> k
    boolean wide -> l
    org.mozilla.classfile.ClassFileWriter this$0 -> a
    void generate() -> a
    org.mozilla.classfile.SuperBlock getSuperBlockFromOffset(int) -> a
    boolean isSuperBlockEnd(int) -> b
    org.mozilla.classfile.SuperBlock[] getSuperBlockDependencies() -> c
    org.mozilla.classfile.SuperBlock getBranchTarget(int) -> c
    boolean isBranch(int) -> d
    int getOperand(int) -> e
    int getOperand(int,int) -> a
    void verify() -> d
    void killSuperBlock(org.mozilla.classfile.SuperBlock) -> a
    void executeWorkList() -> e
    void executeBlock(org.mozilla.classfile.SuperBlock) -> b
    void flowInto(org.mozilla.classfile.SuperBlock) -> c
    void addToWorkList(org.mozilla.classfile.SuperBlock) -> d
    int execute(int) -> f
    void executeALoad(int) -> g
    void executeAStore(int) -> h
    void executeStore(int,int) -> b
    void initializeTypeInfo(int,int) -> c
    void initializeTypeInfo(int,int,int[],int) -> a
    int getLocal(int) -> i
    void setLocal(int,int) -> d
    void push(int) -> j
    int pop() -> f
    void push2(long) -> a
    long pop2() -> g
    void clearStack() -> h
    int computeWriteSize() -> b
    int write(byte[],int) -> a
    void computeRawStackMap() -> i
    int getWorstCaseWriteSize() -> j
    void writeSameFrame(int[],int) -> a
    void writeSameLocalsOneStackItemFrame(int[],int[],int) -> a
    void writeFullFrame(int[],int[],int) -> b
    void writeAppendFrame(int[],int,int) -> a
    void writeChopFrame(int,int) -> e
    int writeTypes(int[]) -> a
    int writeTypes(int[],int) -> b
    int writeType(int) -> k
org.mozilla.classfile.ConstantPool -> a.a.a.f:
    org.mozilla.classfile.ClassFileWriter cfw -> a
    org.mozilla.javascript.UintMap itsStringConstHash -> b
    org.mozilla.javascript.ObjToIntMap itsUtf8Hash -> c
    org.mozilla.javascript.ObjToIntMap itsFieldRefHash -> d
    org.mozilla.javascript.ObjToIntMap itsMethodRefHash -> e
    org.mozilla.javascript.ObjToIntMap itsClassHash -> f
    int itsTop -> g
    int itsTopIndex -> h
    org.mozilla.javascript.UintMap itsConstantData -> i
    org.mozilla.javascript.UintMap itsPoolTypes -> j
    byte[] itsPool -> k
    int write(byte[],int) -> a
    int getWriteSize() -> a
    int addConstant(int) -> a
    int addConstant(long) -> a
    int addConstant(double) -> a
    int addConstant(java.lang.String) -> a
    int getUtfEncodingLimit(java.lang.String,int,int) -> a
    short addUtf8(java.lang.String) -> b
    short addNameAndType(java.lang.String,java.lang.String) -> a
    short addClass(java.lang.String) -> c
    short addFieldRef(java.lang.String,java.lang.String,java.lang.String) -> a
    short addMethodRef(java.lang.String,java.lang.String,java.lang.String) -> b
    short addInterfaceMethodRef(java.lang.String,java.lang.String,java.lang.String) -> c
    java.lang.Object getConstantData(int) -> b
    void setConstantData(int,java.lang.Object) -> a
    byte getConstantType(int) -> c
    void ensure(int) -> d
org.mozilla.classfile.ExceptionTableEntry -> a.a.a.g:
    int itsStartLabel -> a
    int itsEndLabel -> b
    int itsHandlerLabel -> c
    short itsCatchType -> d
org.mozilla.classfile.FieldOrMethodRef -> a.a.a.h:
    java.lang.String className -> a
    java.lang.String name -> b
    java.lang.String type -> c
    int hashCode -> d
    java.lang.String getName() -> a
    java.lang.String getType() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.mozilla.classfile.SuperBlock -> a.a.a.i:
    int index -> a
    int start -> b
    int end -> c
    int[] locals -> d
    int[] stack -> e
    boolean isInitialized -> f
    boolean isInQueue -> g
    int getIndex() -> a
    int[] getLocals() -> b
    int[] getTrimmedLocals() -> c
    int[] getStack() -> d
    boolean merge(int[],int,int[],int,org.mozilla.classfile.ConstantPool) -> a
    boolean mergeState(int[],int[],int,org.mozilla.classfile.ConstantPool) -> a
    int getStart() -> e
    int getEnd() -> f
    java.lang.String toString() -> toString
    boolean isInitialized() -> g
    void setInitialized(boolean) -> a
    boolean isInQueue() -> h
    void setInQueue(boolean) -> b
org.mozilla.classfile.TypeInfo -> a.a.a.j:
    int OBJECT(int) -> a
    int OBJECT(java.lang.String,org.mozilla.classfile.ConstantPool) -> a
    int UNINITIALIZED_VARIABLE(int) -> b
    int getTag(int) -> c
    int getPayload(int) -> d
    java.lang.String getPayloadAsType(int,org.mozilla.classfile.ConstantPool) -> a
    int fromType(java.lang.String,org.mozilla.classfile.ConstantPool) -> b
    boolean isTwoWords(int) -> e
    int merge(int,int,org.mozilla.classfile.ConstantPool) -> a
    java.lang.String toString(int,org.mozilla.classfile.ConstantPool) -> b
    java.lang.Class getClassFromInternalName(java.lang.String) -> a
org.mozilla.javascript.Arguments -> a.a.b.a:
    java.lang.Object callerObj -> a
    java.lang.Object calleeObj -> b
    java.lang.Object lengthObj -> c
    java.lang.Object constructor -> e
    org.mozilla.javascript.NativeCall activation -> f
    java.lang.Object[] args -> g
    java.lang.String getClassName() -> a
    java.lang.Object arg(int) -> f
    void putIntoActivation(int,java.lang.Object) -> b
    java.lang.Object getFromActivation(int) -> i
    void replaceArg(int,java.lang.Object) -> c
    void removeArg(int) -> j
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    boolean sharedWithActivation(int) -> k
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void delete(int) -> a
    int getMaxInstanceId() -> b
    int findInstanceIdInfo(java.lang.String) -> a
    java.lang.String getInstanceIdName(int) -> b
    java.lang.Object getInstanceIdValue(int) -> c
    void setInstanceIdValue(int,java.lang.Object) -> a
    java.lang.Object[] getIds(boolean) -> a
    org.mozilla.javascript.ScriptableObject getOwnPropertyDescriptor(org.mozilla.javascript.Context,java.lang.Object) -> a
    void defineOwnProperty(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.ScriptableObject,boolean) -> a
org.mozilla.javascript.BaseFunction -> a.a.b.b:
    java.lang.Object FUNCTION_TAG -> a
    java.lang.Object prototypeProperty -> b
    int prototypePropertyAttributes -> c
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    java.lang.String getTypeOf() -> c
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    int getMaxInstanceId() -> b
    int findInstanceIdInfo(java.lang.String) -> a
    java.lang.String getInstanceIdName(int) -> b
    java.lang.Object getInstanceIdValue(int) -> c
    void setInstanceIdValue(int,java.lang.Object) -> a
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void initPrototypeId(int) -> d
    boolean isApply(org.mozilla.javascript.IdFunctionObject) -> b
    boolean isApplyOrCall(org.mozilla.javascript.IdFunctionObject) -> c
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.BaseFunction realFunction(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject) -> a
    void setImmunePrototypeProperty(java.lang.Object) -> a
    org.mozilla.javascript.Scriptable getClassPrototype() -> d
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable createObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    java.lang.String decompile(int,int) -> a
    int getArity() -> a_
    int getLength() -> f
    java.lang.String getFunctionName() -> g
    boolean hasPrototypeProperty() -> h
    java.lang.Object getPrototypeProperty() -> i
    java.lang.Object setupDefaultPrototype() -> j
    java.lang.Object getArguments() -> k
    java.lang.Object jsConstructor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> b
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.BeanProperty -> a.a.b.c:
    org.mozilla.javascript.MemberBox getter -> a
    org.mozilla.javascript.MemberBox setter -> b
    org.mozilla.javascript.NativeJavaMethod setters -> c
org.mozilla.javascript.BoundFunction -> a.a.b.d:
    org.mozilla.javascript.Callable targetFunction -> a
    org.mozilla.javascript.Scriptable boundThis -> b
    java.lang.Object[] boundArgs -> c
    int length -> e
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    int getLength() -> f
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object[]) -> a
org.mozilla.javascript.Callable -> a.a.b.e:
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.ClassCache -> a.a.b.f:
    java.lang.Object AKEY -> a
    boolean cachingIsEnabled -> b
    java.util.HashMap classTable -> c
    java.util.HashMap classAdapterCache -> d
    java.util.HashMap interfaceAdapterCache -> e
    int generatedClassSerial -> f
    org.mozilla.javascript.Scriptable associatedScope -> g
    org.mozilla.javascript.ClassCache get(org.mozilla.javascript.Scriptable) -> a
    boolean associate(org.mozilla.javascript.ScriptableObject) -> a
    boolean isCachingEnabled() -> a
    java.util.Map getClassCacheMap() -> b
    java.util.Map getInterfaceAdapterCacheMap() -> c
    int newClassSerialNumber() -> d
    java.lang.Object getInterfaceAdapter(java.lang.Class) -> a
    void cacheInterfaceAdapter(java.lang.Class,java.lang.Object) -> a
    org.mozilla.javascript.Scriptable getAssociatedScope() -> e
org.mozilla.javascript.ClassShutter -> a.a.b.g:
    boolean visibleToScripts(java.lang.String) -> a
org.mozilla.javascript.CodeGenerator -> a.a.b.h:
    org.mozilla.javascript.CompilerEnvirons compilerEnv -> a
    boolean itsInFunctionFlag -> b
    boolean itsInTryFlag -> c
    org.mozilla.javascript.InterpreterData itsData -> d
    org.mozilla.javascript.ast.ScriptNode scriptOrFn -> e
    int iCodeTop -> f
    int stackDepth -> g
    int lineNumber -> h
    int doubleTableTop -> i
    org.mozilla.javascript.ObjToIntMap strings -> j
    int localTop -> k
    int[] labelTable -> l
    int labelTableTop -> m
    long[] fixupTable -> n
    int fixupTableTop -> o
    org.mozilla.javascript.ObjArray literalIds -> p
    int exceptionTableTop -> q
    org.mozilla.javascript.InterpreterData compile(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ast.ScriptNode,java.lang.String,boolean) -> a
    void generateFunctionICode() -> a
    void generateICodeFromTree(org.mozilla.javascript.Node) -> a
    void generateNestedFunctions() -> b
    void generateRegExpLiterals() -> c
    void updateLineNumber(org.mozilla.javascript.Node) -> b
    java.lang.RuntimeException badTree(org.mozilla.javascript.Node) -> c
    void visitStatement(org.mozilla.javascript.Node,int) -> a
    void visitExpression(org.mozilla.javascript.Node,int) -> b
    void generateCallFunAndThis(org.mozilla.javascript.Node) -> d
    void visitIncDec(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void visitLiteral(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
    void visitArrayComprehension(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    int getLocalBlockRef(org.mozilla.javascript.Node) -> e
    int getTargetLabel(org.mozilla.javascript.Node) -> f
    void markTargetLabel(org.mozilla.javascript.Node) -> g
    void addGoto(org.mozilla.javascript.Node,int) -> c
    void fixLabelGotos() -> d
    void addBackwardGoto(int,int) -> a
    void resolveForwardGoto(int) -> c
    void resolveGoto(int,int) -> b
    void addToken(int) -> d
    void addIcode(int) -> e
    void addUint8(int) -> f
    void addUint16(int) -> g
    void addInt(int) -> h
    int getDoubleIndex(double) -> a
    void addGotoOp(int) -> i
    void addVarOp(int,int) -> c
    void addStringOp(int,java.lang.String) -> a
    void addIndexOp(int,int) -> d
    void addStringPrefix(java.lang.String) -> a
    void addIndexPrefix(int) -> j
    void addExceptionHandler(int,int,int,boolean,int,int) -> a
    byte[] increaseICodeCapacity(int) -> k
    void stackChange(int) -> l
    int allocLocal() -> e
    void releaseLocal(int) -> m
org.mozilla.javascript.CompilerEnvirons -> a.a.b.i:
    org.mozilla.javascript.ErrorReporter errorReporter -> b
    int languageVersion -> c
    boolean generateDebugInfo -> d
    boolean reservedKeywordAsIdentifier -> e
    boolean allowMemberExprAsFunctionName -> f
    boolean xmlAvailable -> g
    int optimizationLevel -> h
    boolean generatingSource -> i
    boolean strictMode -> j
    boolean warningAsError -> k
    boolean generateObserverCount -> l
    boolean recordingComments -> m
    boolean recordingLocalJsDocComments -> n
    boolean recoverFromErrors -> o
    boolean warnTrailingComma -> p
    boolean ideMode -> q
    boolean allowSharpComments -> r
    java.util.Set activationNames -> a
    void initFromContext(org.mozilla.javascript.Context) -> a
    org.mozilla.javascript.ErrorReporter getErrorReporter() -> a
    void setErrorReporter(org.mozilla.javascript.ErrorReporter) -> a
    int getLanguageVersion() -> b
    boolean isGenerateDebugInfo() -> c
    boolean isReservedKeywordAsIdentifier() -> d
    boolean isAllowMemberExprAsFunctionName() -> e
    boolean isXmlAvailable() -> f
    int getOptimizationLevel() -> g
    boolean isGeneratingSource() -> h
    boolean getWarnTrailingComma() -> i
    boolean isStrictMode() -> j
    boolean reportWarningAsError() -> k
    boolean isGenerateObserverCount() -> l
    boolean isRecordingComments() -> m
    boolean isRecordingLocalJsDocComments() -> n
    boolean recoverFromErrors() -> o
    boolean isIdeMode() -> p
    java.util.Set getActivationNames() -> q
org.mozilla.javascript.ConsString -> a.a.b.j:
    java.lang.CharSequence s1 -> a
    java.lang.CharSequence s2 -> b
    int length -> c
    int depth -> d
    java.lang.String toString() -> toString
    java.lang.String flatten() -> a
    void appendTo(java.lang.StringBuilder) -> a
    void appendFragment(java.lang.CharSequence,java.lang.StringBuilder) -> a
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
org.mozilla.javascript.ConstProperties -> a.a.b.k:
    void putConst(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void defineConst(java.lang.String,org.mozilla.javascript.Scriptable) -> a
    boolean isConst(java.lang.String) -> c
org.mozilla.javascript.Context -> a.a.b.l:
    java.lang.Object[] emptyArgs -> a
    java.lang.Class codegenClass -> t
    java.lang.Class interpreterClass -> u
    org.mozilla.javascript.ContextFactory factory -> v
    boolean sealed -> w
    java.lang.Object sealKey -> x
    org.mozilla.javascript.Scriptable topCallScope -> b
    boolean isContinuationsTopCall -> c
    org.mozilla.javascript.NativeCall currentActivationCall -> d
    org.mozilla.javascript.xml.XMLLib cachedXMLLib -> e
    org.mozilla.javascript.ObjToIntMap iterating -> f
    java.lang.Object interpreterSecurityDomain -> g
    int version -> h
    org.mozilla.javascript.SecurityController securityController -> y
    org.mozilla.javascript.ClassShutter classShutter -> z
    org.mozilla.javascript.ErrorReporter errorReporter -> A
    org.mozilla.javascript.RegExpProxy regExpProxy -> i
    java.util.Locale locale -> B
    boolean generatingDebug -> C
    boolean generatingDebugChanged -> D
    boolean generatingSource -> E
    boolean useDynamicScope -> j
    int optimizationLevel -> F
    int maximumInterpreterStackDepth -> G
    org.mozilla.javascript.WrapFactory wrapFactory -> H
    org.mozilla.javascript.debug.Debugger debugger -> k
    int enterCount -> I
    java.lang.ClassLoader applicationClassLoader -> J
    java.util.Set activationNames -> l
    java.lang.Object lastInterpreterFrame -> m
    org.mozilla.javascript.ObjArray previousInterpreterInvocations -> n
    int instructionCount -> o
    int instructionThreshold -> p
    int scratchIndex -> q
    org.mozilla.javascript.Scriptable scratchScriptable -> r
    boolean generateObserverCount -> s
    org.mozilla.javascript.Context getCurrentContext() -> a
    org.mozilla.javascript.Context enter() -> b
    org.mozilla.javascript.Context enter(org.mozilla.javascript.Context) -> a
    org.mozilla.javascript.Context enter(org.mozilla.javascript.Context,org.mozilla.javascript.ContextFactory) -> a
    void exit() -> c
    java.lang.Object call(org.mozilla.javascript.ContextFactory,org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object call(org.mozilla.javascript.ContextFactory,org.mozilla.javascript.ContextAction) -> a
    org.mozilla.javascript.ContextFactory getFactory() -> d
    boolean isSealed() -> e
    void seal(java.lang.Object) -> a
    void onSealedMutation() -> f
    int getLanguageVersion() -> g
    org.mozilla.javascript.ErrorReporter getErrorReporter() -> h
    java.util.Locale getLocale() -> i
    void reportWarning(java.lang.String,java.lang.String,int,java.lang.String,int) -> a
    void reportWarning(java.lang.String) -> a
    void reportError(java.lang.String,java.lang.String,int,java.lang.String,int) -> b
    org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String,java.lang.String,int,java.lang.String,int) -> c
    org.mozilla.javascript.EvaluatorException reportRuntimeError0(java.lang.String) -> b
    org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object) -> a
    org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String,java.lang.Object,java.lang.Object) -> a
    org.mozilla.javascript.EvaluatorException reportRuntimeError3(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    org.mozilla.javascript.EvaluatorException reportRuntimeError4(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String) -> c
    org.mozilla.javascript.ScriptableObject initStandardObjects() -> j
    org.mozilla.javascript.ScriptableObject initStandardObjects(org.mozilla.javascript.ScriptableObject,boolean) -> a
    java.lang.Object evaluateString(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.String,int,java.lang.Object) -> a
    org.mozilla.javascript.Script compileString(java.lang.String,java.lang.String,int,java.lang.Object) -> a
    org.mozilla.javascript.Script compileString(java.lang.String,org.mozilla.javascript.Evaluator,org.mozilla.javascript.ErrorReporter,java.lang.String,int,java.lang.Object) -> a
    org.mozilla.javascript.Function compileFunction(org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Evaluator,org.mozilla.javascript.ErrorReporter,java.lang.String,int,java.lang.Object) -> a
    java.lang.String decompileScript(org.mozilla.javascript.Script,int) -> a
    org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable,int) -> a
    org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object[] getElements(org.mozilla.javascript.Scriptable) -> b
    java.lang.String toString(java.lang.Object) -> b
    org.mozilla.javascript.Scriptable toObject(java.lang.Object,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object javaToJS(java.lang.Object,org.mozilla.javascript.Scriptable) -> b
    java.lang.Object jsToJava(java.lang.Object,java.lang.Class) -> a
    java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable) -> a
    boolean isGeneratingDebug() -> k
    boolean isGeneratingSource() -> l
    int getOptimizationLevel() -> m
    void setOptimizationLevel(int) -> a
    boolean isValidOptimizationLevel(int) -> b
    void checkOptimizationLevel(int) -> c
    int getMaximumInterpreterStackDepth() -> n
    org.mozilla.javascript.ClassShutter getClassShutter() -> o
    org.mozilla.javascript.WrapFactory getWrapFactory() -> p
    boolean hasFeature(int) -> d
    org.mozilla.javascript.xml.XMLLib$Factory getE4xImplementationFactory() -> q
    void observeInstructionCount(int) -> e
    org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader) -> a
    java.lang.ClassLoader getApplicationClassLoader() -> r
    org.mozilla.javascript.Context getContext() -> s
    java.lang.Object compileImpl(org.mozilla.javascript.Scriptable,java.io.Reader,java.lang.String,java.lang.String,int,java.lang.Object,boolean,org.mozilla.javascript.Evaluator,org.mozilla.javascript.ErrorReporter) -> a
    void notifyDebugger_r(org.mozilla.javascript.Context,org.mozilla.javascript.debug.DebuggableScript,java.lang.String) -> a
    org.mozilla.javascript.Evaluator createCompiler() -> y
    org.mozilla.javascript.Evaluator createInterpreter() -> t
    java.lang.String getSourcePositionFromStack(int[]) -> a
    org.mozilla.javascript.RegExpProxy getRegExpProxy() -> u
    boolean isVersionECMA1() -> v
    org.mozilla.javascript.SecurityController getSecurityController() -> w
    boolean isGeneratingDebugChanged() -> x
org.mozilla.javascript.Context$1 -> a.a.b.m:
    org.mozilla.javascript.Callable val$callable -> a
    org.mozilla.javascript.Scriptable val$scope -> b
    org.mozilla.javascript.Scriptable val$thisObj -> c
    java.lang.Object[] val$args -> d
    java.lang.Object run(org.mozilla.javascript.Context) -> a
org.mozilla.javascript.ContextAction -> a.a.b.n:
    java.lang.Object run(org.mozilla.javascript.Context) -> a
org.mozilla.javascript.ContextFactory -> a.a.b.o:
    org.mozilla.javascript.ContextFactory global -> a
    boolean sealed -> b
    java.lang.Object listenersLock -> c
    java.lang.Object listeners -> d
    java.lang.ClassLoader applicationClassLoader -> e
    org.mozilla.javascript.ContextFactory getGlobal() -> a
    org.mozilla.javascript.Context makeContext() -> b
    boolean hasFeature(org.mozilla.javascript.Context,int) -> a
    boolean isDom3Present() -> g
    org.mozilla.javascript.xml.XMLLib$Factory getE4xImplementationFactory() -> c
    org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader) -> a
    java.lang.ClassLoader getApplicationClassLoader() -> d
    java.lang.Object doTopCall(org.mozilla.javascript.Callable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    void observeInstructionCount(org.mozilla.javascript.Context,int) -> b
    void onContextCreated(org.mozilla.javascript.Context) -> a
    void onContextReleased(org.mozilla.javascript.Context) -> b
    boolean isSealed() -> e
    org.mozilla.javascript.Context enterContext() -> f
    org.mozilla.javascript.Context enterContext(org.mozilla.javascript.Context) -> c
org.mozilla.javascript.ContextFactory$1 -> a.a.b.p:
    java.lang.ClassLoader val$parent -> a
    org.mozilla.javascript.ContextFactory this$0 -> b
    org.mozilla.javascript.DefiningClassLoader run() -> a
    java.lang.Object run() -> run
org.mozilla.javascript.ContextFactory$Listener -> a.a.b.q:
    void contextCreated(org.mozilla.javascript.Context) -> a
    void contextReleased(org.mozilla.javascript.Context) -> b
org.mozilla.javascript.ContinuationPending -> a.a.b.r:
org.mozilla.javascript.DToA -> a.a.b.s:
    double[] tens -> a
    double[] bigtens -> b
    int[] dtoaModes -> c
    char BASEDIGIT(int) -> a
    int lo0bits(int) -> b
    int hi0bits(int) -> c
    void stuffBits(byte[],int,int) -> a
    java.math.BigInteger d2b(double,int[],int[]) -> a
    java.lang.String JS_dtobasestr(int,double) -> a
    int word0(double) -> a
    double setWord0(double,int) -> a
    int word1(double) -> b
    java.math.BigInteger pow5mult(java.math.BigInteger,int) -> a
    boolean roundOff(java.lang.StringBuilder) -> a
    int JS_dtoa(double,int,boolean,int,boolean[],java.lang.StringBuilder) -> a
    void stripTrailingZeroes(java.lang.StringBuilder) -> b
    void JS_dtostr(java.lang.StringBuilder,int,int,double) -> a
org.mozilla.javascript.Decompiler -> a.a.b.t:
    char[] sourceBuffer -> a
    int sourceTop -> b
    java.lang.String getEncodedSource() -> a
    int getCurrentOffset() -> b
    int markFunctionStart(int) -> a
    int markFunctionEnd(int) -> b
    void addToken(int) -> c
    void addEOL(int) -> d
    void addName(java.lang.String) -> a
    void addString(java.lang.String) -> b
    void addRegexp(java.lang.String,java.lang.String) -> a
    void addNumber(double) -> a
    void appendString(java.lang.String) -> c
    void append(char) -> a
    void increaseSourceCapacity(int) -> e
    java.lang.String sourceToString(int) -> f
    java.lang.String decompile(java.lang.String,int,org.mozilla.javascript.UintMap) -> a
    int getNext(java.lang.String,int,int) -> a
    int getSourceStringEnd(java.lang.String,int) -> a
    int printSourceString(java.lang.String,int,boolean,java.lang.StringBuffer) -> a
    int printSourceNumber(java.lang.String,int,java.lang.StringBuffer) -> a
org.mozilla.javascript.DefaultErrorReporter -> a.a.b.u:
    org.mozilla.javascript.DefaultErrorReporter instance -> a
    boolean forEval -> b
    org.mozilla.javascript.ErrorReporter chainedReporter -> c
    org.mozilla.javascript.ErrorReporter forEval(org.mozilla.javascript.ErrorReporter) -> a
    void warning(java.lang.String,java.lang.String,int,java.lang.String,int) -> a
    void error(java.lang.String,java.lang.String,int,java.lang.String,int) -> b
    org.mozilla.javascript.EvaluatorException runtimeError(java.lang.String,java.lang.String,int,java.lang.String,int) -> c
org.mozilla.javascript.DefiningClassLoader -> a.a.b.v:
    java.lang.ClassLoader parentLoader -> a
    java.lang.Class defineClass(java.lang.String,byte[]) -> a
    void linkClass(java.lang.Class) -> a
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
org.mozilla.javascript.EcmaError -> a.a.b.w:
    java.lang.String errorName -> c
    java.lang.String errorMessage -> d
    java.lang.String details() -> a
    java.lang.String getName() -> b
    java.lang.String getErrorMessage() -> c
org.mozilla.javascript.ErrorReporter -> a.a.b.x:
    void warning(java.lang.String,java.lang.String,int,java.lang.String,int) -> a
    void error(java.lang.String,java.lang.String,int,java.lang.String,int) -> b
    org.mozilla.javascript.EvaluatorException runtimeError(java.lang.String,java.lang.String,int,java.lang.String,int) -> c
org.mozilla.javascript.Evaluator -> a.a.b.y:
    java.lang.Object compile(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ast.ScriptNode,java.lang.String,boolean) -> a
    org.mozilla.javascript.Function createFunctionObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object) -> a
    org.mozilla.javascript.Script createScriptObject(java.lang.Object,java.lang.Object) -> a
    void captureStackInfo(org.mozilla.javascript.RhinoException) -> a
    java.lang.String getSourcePositionFromStack(org.mozilla.javascript.Context,int[]) -> a
    java.lang.String getPatchedStack(org.mozilla.javascript.RhinoException,java.lang.String) -> a
    void setEvalScriptFlag(org.mozilla.javascript.Script) -> a
org.mozilla.javascript.EvaluatorException -> a.a.b.z:
org.mozilla.javascript.FieldAndMethods -> a.a.b.aa:
    java.lang.reflect.Field field -> a
    java.lang.Object javaObject -> b
    java.lang.Object getDefaultValue(java.lang.Class) -> a
org.mozilla.javascript.Function -> a.a.b.ab:
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.FunctionObject -> a.a.b.ac:
    boolean sawSecurityException -> b
    org.mozilla.javascript.MemberBox member -> a
    java.lang.String functionName -> c
    byte[] typeTags -> e
    int parmsLength -> f
    boolean hasVoidReturn -> g
    int returnTypeTag -> h
    boolean isStatic -> i
    int getTypeTag(java.lang.Class) -> b
    java.lang.Object convertArg(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,int) -> a
    int getArity() -> a_
    int getLength() -> f
    java.lang.String getFunctionName() -> g
    java.lang.reflect.Method findSingleMethod(java.lang.reflect.Method[],java.lang.String) -> a
    java.lang.reflect.Method[] getMethodList(java.lang.Class) -> c
    void initAsConstructor(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable createObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    boolean isVarArgsMethod() -> j
    boolean isVarArgsConstructor() -> k
org.mozilla.javascript.GeneratedClassLoader -> a.a.b.ad:
    java.lang.Class defineClass(java.lang.String,byte[]) -> a
    void linkClass(java.lang.Class) -> a
org.mozilla.javascript.IRFactory -> a.a.b.ae:
    org.mozilla.javascript.Decompiler decompiler -> g
    org.mozilla.javascript.ast.ScriptNode transformTree(org.mozilla.javascript.ast.AstRoot) -> a
    org.mozilla.javascript.Node transform(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.Node transformArrayComp(org.mozilla.javascript.ast.ArrayComprehension) -> a
    org.mozilla.javascript.Node arrayCompTransformHelper(org.mozilla.javascript.ast.ArrayComprehension,java.lang.String) -> a
    org.mozilla.javascript.Node transformArrayLiteral(org.mozilla.javascript.ast.ArrayLiteral) -> b
    org.mozilla.javascript.Node transformAssignment(org.mozilla.javascript.ast.Assignment) -> a
    org.mozilla.javascript.Node transformBlock(org.mozilla.javascript.ast.AstNode) -> e
    org.mozilla.javascript.Node transformBreak(org.mozilla.javascript.ast.BreakStatement) -> a
    org.mozilla.javascript.Node transformCondExpr(org.mozilla.javascript.ast.ConditionalExpression) -> a
    org.mozilla.javascript.Node transformContinue(org.mozilla.javascript.ast.ContinueStatement) -> a
    org.mozilla.javascript.Node transformDoLoop(org.mozilla.javascript.ast.DoLoop) -> a
    org.mozilla.javascript.Node transformElementGet(org.mozilla.javascript.ast.ElementGet) -> b
    org.mozilla.javascript.Node transformExprStmt(org.mozilla.javascript.ast.ExpressionStatement) -> a
    org.mozilla.javascript.Node transformForInLoop(org.mozilla.javascript.ast.ForInLoop) -> a
    org.mozilla.javascript.Node transformForLoop(org.mozilla.javascript.ast.ForLoop) -> a
    org.mozilla.javascript.Node transformFunction(org.mozilla.javascript.ast.FunctionNode) -> b
    org.mozilla.javascript.Node transformFunctionCall(org.mozilla.javascript.ast.FunctionCall) -> a
    org.mozilla.javascript.Node transformGenExpr(org.mozilla.javascript.ast.GeneratorExpression) -> a
    org.mozilla.javascript.Node genExprTransformHelper(org.mozilla.javascript.ast.GeneratorExpression) -> b
    org.mozilla.javascript.Node transformIf(org.mozilla.javascript.ast.IfStatement) -> a
    org.mozilla.javascript.Node transformInfix(org.mozilla.javascript.ast.InfixExpression) -> a
    org.mozilla.javascript.Node transformLabeledStatement(org.mozilla.javascript.ast.LabeledStatement) -> a
    org.mozilla.javascript.Node transformLetNode(org.mozilla.javascript.ast.LetNode) -> a
    org.mozilla.javascript.Node transformLiteral(org.mozilla.javascript.ast.AstNode) -> f
    org.mozilla.javascript.Node transformName(org.mozilla.javascript.ast.Name) -> a
    org.mozilla.javascript.Node transformNewExpr(org.mozilla.javascript.ast.NewExpression) -> a
    org.mozilla.javascript.Node transformNumber(org.mozilla.javascript.ast.NumberLiteral) -> a
    org.mozilla.javascript.Node transformObjectLiteral(org.mozilla.javascript.ast.ObjectLiteral) -> b
    java.lang.Object getPropKey(org.mozilla.javascript.Node) -> c
    org.mozilla.javascript.Node transformParenExpr(org.mozilla.javascript.ast.ParenthesizedExpression) -> a
    org.mozilla.javascript.Node transformPropertyGet(org.mozilla.javascript.ast.PropertyGet) -> b
    org.mozilla.javascript.Node transformRegExp(org.mozilla.javascript.ast.RegExpLiteral) -> a
    org.mozilla.javascript.Node transformReturn(org.mozilla.javascript.ast.ReturnStatement) -> a
    org.mozilla.javascript.Node transformScript(org.mozilla.javascript.ast.ScriptNode) -> a
    org.mozilla.javascript.Node transformString(org.mozilla.javascript.ast.StringLiteral) -> a
    org.mozilla.javascript.Node transformSwitch(org.mozilla.javascript.ast.SwitchStatement) -> a
    org.mozilla.javascript.Node transformThrow(org.mozilla.javascript.ast.ThrowStatement) -> a
    org.mozilla.javascript.Node transformTry(org.mozilla.javascript.ast.TryStatement) -> a
    org.mozilla.javascript.Node transformUnary(org.mozilla.javascript.ast.UnaryExpression) -> a
    org.mozilla.javascript.Node transformVariables(org.mozilla.javascript.ast.VariableDeclaration) -> a
    org.mozilla.javascript.Node transformVariableInitializers(org.mozilla.javascript.ast.VariableDeclaration) -> b
    org.mozilla.javascript.Node transformWhileLoop(org.mozilla.javascript.ast.WhileLoop) -> a
    org.mozilla.javascript.Node transformWith(org.mozilla.javascript.ast.WithStatement) -> a
    org.mozilla.javascript.Node transformYield(org.mozilla.javascript.ast.Yield) -> a
    org.mozilla.javascript.Node transformXmlLiteral(org.mozilla.javascript.ast.XmlLiteral) -> a
    org.mozilla.javascript.Node transformXmlMemberGet(org.mozilla.javascript.ast.XmlMemberGet) -> a
    org.mozilla.javascript.Node transformXmlRef(org.mozilla.javascript.ast.XmlRef) -> a
    org.mozilla.javascript.Node transformXmlRef(org.mozilla.javascript.Node,org.mozilla.javascript.ast.XmlRef,int) -> a
    org.mozilla.javascript.Node transformDefaultXmlNamepace(org.mozilla.javascript.ast.UnaryExpression) -> b
    void addSwitchCase(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void closeSwitch(org.mozilla.javascript.Node) -> d
    org.mozilla.javascript.Node createExprStatementNoReturn(org.mozilla.javascript.Node,int) -> a
    org.mozilla.javascript.Node createString(java.lang.String) -> e
    org.mozilla.javascript.Node createCatch(java.lang.String,org.mozilla.javascript.Node,org.mozilla.javascript.Node,int) -> a
    org.mozilla.javascript.Node initFunction(org.mozilla.javascript.ast.FunctionNode,int,org.mozilla.javascript.Node,int) -> a
    org.mozilla.javascript.ast.Scope createLoopNode(org.mozilla.javascript.Node,int) -> b
    org.mozilla.javascript.Node createFor(org.mozilla.javascript.ast.Scope,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node createLoop(org.mozilla.javascript.ast.Jump,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node createForIn(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean) -> a
    org.mozilla.javascript.Node createTryCatchFinally(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,int) -> a
    org.mozilla.javascript.Node createWith(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int) -> a
    org.mozilla.javascript.Node createIf(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,int) -> b
    org.mozilla.javascript.Node createCondExpr(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
    org.mozilla.javascript.Node createUnary(int,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node createCallOrNew(int,org.mozilla.javascript.Node) -> b
    org.mozilla.javascript.Node createIncDec(int,boolean,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node createPropertyGet(org.mozilla.javascript.Node,java.lang.String,java.lang.String,int) -> a
    org.mozilla.javascript.Node createElementGet(org.mozilla.javascript.Node,java.lang.String,org.mozilla.javascript.Node,int) -> a
    org.mozilla.javascript.Node createMemberRefGet(org.mozilla.javascript.Node,java.lang.String,org.mozilla.javascript.Node,int) -> b
    org.mozilla.javascript.Node createBinary(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
    org.mozilla.javascript.Node createAssignment(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> c
    org.mozilla.javascript.Node createUseLocal(org.mozilla.javascript.Node) -> e
    org.mozilla.javascript.ast.Jump makeJump(int,org.mozilla.javascript.Node) -> c
    org.mozilla.javascript.Node makeReference(org.mozilla.javascript.Node) -> f
    int isAlwaysDefinedBoolean(org.mozilla.javascript.Node) -> g
    boolean isDestructuring(org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node decompileFunctionHeader(org.mozilla.javascript.ast.FunctionNode) -> a
    void decompile(org.mozilla.javascript.ast.AstNode) -> b
    void decompileArrayLiteral(org.mozilla.javascript.ast.ArrayLiteral) -> a
    void decompileObjectLiteral(org.mozilla.javascript.ast.ObjectLiteral) -> a
    void decompilePropertyGet(org.mozilla.javascript.ast.PropertyGet) -> a
    void decompileElementGet(org.mozilla.javascript.ast.ElementGet) -> a
org.mozilla.javascript.Icode -> a.a.b.af:
    boolean validIcode(int) -> a
    boolean validTokenCode(int) -> b
org.mozilla.javascript.IdFunctionCall -> a.a.b.ag:
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.IdFunctionObject -> a.a.b.ah:
    org.mozilla.javascript.IdFunctionCall idcall -> a
    java.lang.Object tag -> b
    int methodId -> c
    int arity -> e
    boolean useCallAsConstructor -> f
    java.lang.String functionName -> g
    void initFunction(java.lang.String,org.mozilla.javascript.Scriptable) -> b
    boolean hasTag(java.lang.Object) -> b
    int methodId() -> j
    void markAsConstructor(org.mozilla.javascript.Scriptable) -> b
    void addAsProperty(org.mozilla.javascript.Scriptable) -> c
    void exportAsScopeProperty() -> k
    org.mozilla.javascript.Scriptable getPrototype() -> l
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable createObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    java.lang.String decompile(int,int) -> a
    int getArity() -> a_
    int getLength() -> f
    java.lang.String getFunctionName() -> g
    java.lang.RuntimeException unknown() -> m
org.mozilla.javascript.IdScriptableObject -> a.a.b.ai:
    org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues -> a
    java.lang.Object defaultGet(java.lang.String) -> d
    void defaultPut(java.lang.String,java.lang.Object) -> a
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    void delete(java.lang.String) -> e
    int getAttributes(java.lang.String) -> f
    void setAttributes(java.lang.String,int) -> a
    java.lang.Object[] getIds(boolean) -> a
    int getMaxInstanceId() -> b
    int instanceIdInfo(int,int) -> b
    int findInstanceIdInfo(java.lang.String) -> a
    java.lang.String getInstanceIdName(int) -> b
    java.lang.Object getInstanceIdValue(int) -> c
    void setInstanceIdValue(int,java.lang.Object) -> a
    void setInstanceIdAttributes(int,int) -> c
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.IdFunctionObject exportAsJSClass(int,org.mozilla.javascript.Scriptable,boolean) -> a
    void activatePrototypeMap(int) -> e
    void initPrototypeMethod(java.lang.Object,int,java.lang.String,int) -> a
    void initPrototypeValue(int,java.lang.String,java.lang.Object,int) -> a
    void initPrototypeId(int) -> d
    int findPrototypeId(java.lang.String) -> b
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void addIdFunctionProperty(org.mozilla.javascript.Scriptable,java.lang.Object,int,java.lang.String,int) -> a
    org.mozilla.javascript.EcmaError incompatibleCallError(org.mozilla.javascript.IdFunctionObject) -> d
    org.mozilla.javascript.IdFunctionObject newIdFunction(java.lang.Object,int,java.lang.String,int,org.mozilla.javascript.Scriptable) -> a
    void defineOwnProperty(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.ScriptableObject) -> a
    org.mozilla.javascript.ScriptableObject getOwnPropertyDescriptor(org.mozilla.javascript.Context,java.lang.Object) -> a
    org.mozilla.javascript.ScriptableObject getBuiltInDescriptor(java.lang.String) -> g
org.mozilla.javascript.IdScriptableObject$PrototypeValues -> a.a.b.aj:
    org.mozilla.javascript.IdScriptableObject obj -> b
    int maxId -> c
    java.lang.Object[] valueArray -> d
    short[] attributeArray -> e
    int constructorId -> a
    org.mozilla.javascript.IdFunctionObject constructor -> f
    short constructorAttrs -> g
    void initValue(int,java.lang.String,java.lang.Object,int) -> a
    void initSlot(int,java.lang.String,java.lang.Object,int) -> b
    org.mozilla.javascript.IdFunctionObject createPrecachedConstructor() -> a
    int findId(java.lang.String) -> a
    boolean has(int) -> a
    java.lang.Object get(int) -> b
    void set(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void delete(int) -> c
    int getAttributes(int) -> d
    void setAttributes(int,int) -> a
    java.lang.Object[] getNames(boolean,java.lang.Object[]) -> a
    java.lang.Object ensureId(int) -> e
org.mozilla.javascript.InterfaceAdapter -> a.a.b.ak:
    java.lang.Object proxyHelper -> a
    java.lang.Object create(org.mozilla.javascript.Context,java.lang.Class,org.mozilla.javascript.ScriptableObject) -> a
org.mozilla.javascript.InterpretedFunction -> a.a.b.al:
    org.mozilla.javascript.InterpreterData idata -> a
    org.mozilla.javascript.SecurityController securityController -> b
    java.lang.Object securityDomain -> c
    org.mozilla.javascript.InterpretedFunction createScript(org.mozilla.javascript.InterpreterData,java.lang.Object) -> a
    org.mozilla.javascript.InterpretedFunction createFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.InterpreterData,java.lang.Object) -> a
    org.mozilla.javascript.InterpretedFunction createFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.InterpretedFunction,int) -> a
    java.lang.String getFunctionName() -> g
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> b
    boolean isScript() -> j
    java.lang.String getEncodedSource() -> k
    java.lang.Object resumeGenerator(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int,java.lang.Object,java.lang.Object) -> a
    int getLanguageVersion() -> m
    int getParamCount() -> n
    int getParamAndVarCount() -> o
    java.lang.String getParamOrVarName(int) -> f
    boolean getParamOrVarConst(int) -> a_
org.mozilla.javascript.Interpreter -> a.a.b.am:
    org.mozilla.javascript.InterpreterData itsData -> a
    org.mozilla.javascript.Interpreter$CallFrame captureFrameForGenerator(org.mozilla.javascript.Interpreter$CallFrame) -> a
    java.lang.Object compile(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ast.ScriptNode,java.lang.String,boolean) -> a
    org.mozilla.javascript.Script createScriptObject(java.lang.Object,java.lang.Object) -> a
    void setEvalScriptFlag(org.mozilla.javascript.Script) -> a
    org.mozilla.javascript.Function createFunctionObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object) -> a
    int getShort(byte[],int) -> a
    int getIndex(byte[],int) -> b
    int getInt(byte[],int) -> c
    int getExceptionHandler(org.mozilla.javascript.Interpreter$CallFrame,boolean) -> a
    void dumpICode(org.mozilla.javascript.InterpreterData) -> a
    void captureStackInfo(org.mozilla.javascript.RhinoException) -> a
    java.lang.String getSourcePositionFromStack(org.mozilla.javascript.Context,int[]) -> a
    java.lang.String getPatchedStack(org.mozilla.javascript.RhinoException,java.lang.String) -> a
    org.mozilla.javascript.ScriptStackElement[][] getScriptStackElements(org.mozilla.javascript.RhinoException) -> b
    java.lang.String getEncodedSource(org.mozilla.javascript.InterpreterData) -> b
    void initFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.InterpretedFunction,int) -> a
    java.lang.Object interpret(org.mozilla.javascript.InterpretedFunction,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object resumeGenerator(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int,java.lang.Object,java.lang.Object) -> a
    java.lang.Object restartContinuation(org.mozilla.javascript.NativeContinuation,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object interpretLoop(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object) -> a
    int doInOrInstanceof(org.mozilla.javascript.Context,int,java.lang.Object[],double[],int) -> a
    int doCompare(org.mozilla.javascript.Interpreter$CallFrame,int,java.lang.Object[],double[],int) -> a
    int doBitOp(org.mozilla.javascript.Interpreter$CallFrame,int,java.lang.Object[],double[],int) -> b
    int doDelName(org.mozilla.javascript.Context,int,java.lang.Object[],double[],int) -> b
    int doGetElem(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int) -> a
    int doSetElem(org.mozilla.javascript.Context,java.lang.Object[],double[],int) -> a
    int doElemIncDec(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,byte[],java.lang.Object[],double[],int) -> a
    int doCallSpecial(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int,byte[],int) -> a
    int doSetConstVar(org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int,java.lang.Object[],double[],int[],int) -> a
    int doSetVar(org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int,java.lang.Object[],double[],int[],int) -> b
    int doGetVar(org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int,java.lang.Object[],double[],int) -> a
    int doVarIncDec(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int,java.lang.Object[],double[],int) -> a
    int doRefMember(org.mozilla.javascript.Context,java.lang.Object[],double[],int,int) -> a
    int doRefNsMember(org.mozilla.javascript.Context,java.lang.Object[],double[],int,int) -> b
    int doRefNsName(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],double[],int,int) -> a
    org.mozilla.javascript.Interpreter$CallFrame initFrameForNoSuchMethod(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,int,java.lang.Object[],double[],int,int,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,org.mozilla.javascript.ScriptRuntime$NoSuchMethodShim,org.mozilla.javascript.InterpretedFunction) -> a
    boolean doEquals(java.lang.Object[],double[],int) -> a
    boolean doShallowEquals(java.lang.Object[],double[],int) -> b
    org.mozilla.javascript.Interpreter$CallFrame processThrowable(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.Interpreter$CallFrame,int,boolean) -> a
    java.lang.Object freezeGenerator(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,int,org.mozilla.javascript.Interpreter$GeneratorState) -> a
    java.lang.Object thawGenerator(org.mozilla.javascript.Interpreter$CallFrame,int,org.mozilla.javascript.Interpreter$GeneratorState,int) -> a
    org.mozilla.javascript.Interpreter$CallFrame initFrameForApplyOrCall(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,int,java.lang.Object[],double[],int,int,org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.InterpretedFunction) -> a
    void initFrame(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],double[],int,int,org.mozilla.javascript.InterpretedFunction,org.mozilla.javascript.Interpreter$CallFrame,org.mozilla.javascript.Interpreter$CallFrame) -> a
    boolean isFrameEnterExitRequired(org.mozilla.javascript.Interpreter$CallFrame) -> b
    void enterFrame(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object[],boolean) -> a
    void exitFrame(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object) -> b
    void setCallResult(org.mozilla.javascript.Interpreter$CallFrame,java.lang.Object,double) -> a
    org.mozilla.javascript.NativeContinuation captureContinuation(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,boolean) -> a
    int stack_int32(org.mozilla.javascript.Interpreter$CallFrame,int) -> a
    double stack_double(org.mozilla.javascript.Interpreter$CallFrame,int) -> b
    boolean stack_boolean(org.mozilla.javascript.Interpreter$CallFrame,int) -> c
    void doAdd(java.lang.Object[],double[],int,org.mozilla.javascript.Context) -> a
    int doArithmetic(org.mozilla.javascript.Interpreter$CallFrame,int,java.lang.Object[],double[],int) -> c
    java.lang.Object[] getArgsArray(java.lang.Object[],double[],int,int) -> a
    void addInstructionCount(org.mozilla.javascript.Context,org.mozilla.javascript.Interpreter$CallFrame,int) -> a
org.mozilla.javascript.Interpreter$1 -> a.a.b.an:
org.mozilla.javascript.Interpreter$CallFrame -> a.a.b.ao:
    org.mozilla.javascript.Interpreter$CallFrame parentFrame -> a
    int frameIndex -> b
    boolean frozen -> c
    org.mozilla.javascript.InterpretedFunction fnOrScript -> d
    org.mozilla.javascript.InterpreterData idata -> e
    java.lang.Object[] stack -> f
    int[] stackAttributes -> g
    double[] sDbl -> h
    org.mozilla.javascript.Interpreter$CallFrame varSource -> i
    int localShift -> j
    int emptyStackTop -> k
    org.mozilla.javascript.debug.DebugFrame debuggerFrame -> l
    boolean useActivation -> m
    boolean isContinuationsTopFrame -> n
    org.mozilla.javascript.Scriptable thisObj -> o
    java.lang.Object result -> p
    double resultDbl -> q
    int pc -> r
    int pcPrevBranch -> s
    int pcSourceLineStart -> t
    org.mozilla.javascript.Scriptable scope -> u
    int savedStackTop -> v
    int savedCallOp -> w
    java.lang.Object throwable -> x
    org.mozilla.javascript.Interpreter$CallFrame cloneFrozen() -> a
org.mozilla.javascript.Interpreter$ContinuationJump -> a.a.b.ap:
    org.mozilla.javascript.Interpreter$CallFrame capturedFrame -> a
    org.mozilla.javascript.Interpreter$CallFrame branchFrame -> b
    java.lang.Object result -> c
    double resultDbl -> d
org.mozilla.javascript.Interpreter$GeneratorState -> a.a.b.aq:
    int operation -> a
    java.lang.Object value -> b
    java.lang.RuntimeException returnedException -> c
org.mozilla.javascript.InterpreterData -> a.a.b.ar:
    java.lang.String itsName -> a
    java.lang.String itsSourceFile -> b
    boolean itsNeedsActivation -> c
    int itsFunctionType -> d
    java.lang.String[] itsStringTable -> e
    double[] itsDoubleTable -> f
    org.mozilla.javascript.InterpreterData[] itsNestedFunctions -> g
    java.lang.Object[] itsRegExpLiterals -> h
    byte[] itsICode -> i
    int[] itsExceptionTable -> j
    int itsMaxVars -> k
    int itsMaxLocals -> l
    int itsMaxStack -> m
    int itsMaxFrameArray -> n
    java.lang.String[] argNames -> o
    boolean[] argIsConst -> p
    int argCount -> q
    int itsMaxCalleeArgs -> r
    java.lang.String encodedSource -> s
    int encodedSourceStart -> t
    int encodedSourceEnd -> u
    int languageVersion -> v
    boolean isStrict -> w
    boolean topLevel -> x
    java.lang.Object[] literalIds -> y
    org.mozilla.javascript.UintMap longJumps -> z
    int firstLinePC -> A
    org.mozilla.javascript.InterpreterData parentData -> B
    boolean evalScriptFlag -> C
    void init() -> c
    int getParamAndVarCount() -> a
    boolean getParamOrVarConst(int) -> a
    int getFunctionCount() -> b
    org.mozilla.javascript.debug.DebuggableScript getFunction(int) -> b
org.mozilla.javascript.JavaAdapter -> a.a.b.as:
    java.lang.Object FTAG -> a
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object getAdapterSelf(java.lang.Class,java.lang.Object) -> a
    java.lang.Object js_createAdapter(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.ObjToIntMap getObjectFunctionNames(org.mozilla.javascript.Scriptable) -> a
    java.lang.Class getAdapterClass(org.mozilla.javascript.Scriptable,java.lang.Class,java.lang.Class[],org.mozilla.javascript.Scriptable) -> a
    byte[] createAdapterCode(org.mozilla.javascript.ObjToIntMap,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.String) -> a
    java.lang.reflect.Method[] getOverridableMethods(java.lang.Class) -> a
    void appendOverridableMethods(java.lang.Class,java.util.ArrayList,java.util.HashSet) -> a
    java.lang.Class loadAdapterClass(java.lang.String,byte[]) -> a
    void generateCtor(org.mozilla.classfile.ClassFileWriter,java.lang.String,java.lang.String,java.lang.reflect.Constructor) -> a
    void generateSerialCtor(org.mozilla.classfile.ClassFileWriter,java.lang.String,java.lang.String) -> a
    void generateEmptyCtor(org.mozilla.classfile.ClassFileWriter,java.lang.String,java.lang.String,java.lang.String) -> a
    void generatePushWrappedArgs(org.mozilla.classfile.ClassFileWriter,java.lang.Class[],int) -> a
    int generateWrapArg(org.mozilla.classfile.ClassFileWriter,int,java.lang.Class) -> a
    void generateReturnResult(org.mozilla.classfile.ClassFileWriter,java.lang.Class,boolean) -> a
    void generateMethod(org.mozilla.classfile.ClassFileWriter,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Class,boolean) -> a
    int generatePushParam(org.mozilla.classfile.ClassFileWriter,int,java.lang.Class) -> b
    void generatePopResult(org.mozilla.classfile.ClassFileWriter,java.lang.Class) -> a
    void generateSuper(org.mozilla.classfile.ClassFileWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Class) -> a
    java.lang.String getMethodSignature(java.lang.reflect.Method,java.lang.Class[]) -> a
    int appendMethodSignature(java.lang.Class[],java.lang.Class,java.lang.StringBuilder) -> a
    java.lang.StringBuilder appendTypeString(java.lang.StringBuilder,java.lang.Class) -> a
org.mozilla.javascript.JavaAdapter$JavaAdapterSignature -> a.a.b.at:
    java.lang.Class superClass -> a
    java.lang.Class[] interfaces -> b
    org.mozilla.javascript.ObjToIntMap names -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.mozilla.javascript.JavaMembers -> a.a.b.au:
    java.lang.Class cl -> b
    java.util.Map members -> c
    java.util.Map fieldAndMethods -> d
    java.util.Map staticMembers -> e
    java.util.Map staticFieldAndMethods -> f
    org.mozilla.javascript.NativeJavaMethod ctors -> a
    boolean has(java.lang.String,boolean) -> a
    java.lang.Object get(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,boolean) -> a
    void put(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,java.lang.Object,boolean) -> a
    java.lang.Object[] getIds(boolean) -> a
    java.lang.String javaSignature(java.lang.Class) -> a
    java.lang.String liveConnectSignature(java.lang.Class[]) -> a
    org.mozilla.javascript.MemberBox findExplicitFunction(java.lang.String,boolean) -> b
    java.lang.Object getExplicitFunction(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,boolean) -> b
    java.lang.reflect.Method[] discoverAccessibleMethods(java.lang.Class,boolean,boolean) -> a
    void discoverAccessibleMethods(java.lang.Class,java.util.Map,boolean,boolean) -> a
    void reflect(org.mozilla.javascript.Scriptable,boolean,boolean) -> a
    java.lang.reflect.Constructor[] getAccessibleConstructors(boolean) -> b
    java.lang.reflect.Field[] getAccessibleFields(boolean,boolean) -> a
    org.mozilla.javascript.MemberBox findGetter(boolean,java.util.Map,java.lang.String,java.lang.String) -> a
    org.mozilla.javascript.MemberBox extractGetMethod(org.mozilla.javascript.MemberBox[],boolean) -> a
    org.mozilla.javascript.MemberBox extractSetMethod(java.lang.Class,org.mozilla.javascript.MemberBox[],boolean) -> a
    org.mozilla.javascript.MemberBox extractSetMethod(org.mozilla.javascript.MemberBox[],boolean) -> b
    java.util.Map getFieldAndMethodsObjects(org.mozilla.javascript.Scriptable,java.lang.Object,boolean) -> a
    org.mozilla.javascript.JavaMembers lookupClass(org.mozilla.javascript.Scriptable,java.lang.Class,java.lang.Class,boolean) -> a
    java.lang.RuntimeException reportMemberNotFound(java.lang.String) -> a
org.mozilla.javascript.JavaMembers$MethodSignature -> a.a.b.av:
    java.lang.String name -> a
    java.lang.Class[] args -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.mozilla.javascript.JavaScriptException -> a.a.b.aw:
    java.lang.Object value -> c
    java.lang.String details() -> a
    java.lang.Object getValue() -> b
org.mozilla.javascript.Kit -> a.a.b.ax:
    java.lang.reflect.Method Throwable_initCause -> a
    java.lang.Class classOrNull(java.lang.String) -> a
    java.lang.Class classOrNull(java.lang.ClassLoader,java.lang.String) -> a
    java.lang.Object newInstanceOrNull(java.lang.Class) -> a
    boolean testIfCanLoadRhinoClasses(java.lang.ClassLoader) -> a
    java.lang.RuntimeException initCause(java.lang.RuntimeException,java.lang.Throwable) -> a
    int xDigitToInt(int,int) -> a
    java.lang.Object getListener(java.lang.Object,int) -> a
    java.lang.Object initHash(java.util.Map,java.lang.Object,java.lang.Object) -> a
    java.lang.Object makeHashKeyFromPair(java.lang.Object,java.lang.Object) -> a
    java.lang.String readReader(java.io.Reader) -> a
    java.lang.RuntimeException codeBug() -> a
    java.lang.RuntimeException codeBug(java.lang.String) -> b
org.mozilla.javascript.Kit$ComplexKey -> a.a.b.ay:
    java.lang.Object key1 -> a
    java.lang.Object key2 -> b
    int hash -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.mozilla.javascript.LazilyLoadedCtor -> a.a.b.az:
    org.mozilla.javascript.ScriptableObject scope -> a
    java.lang.String propertyName -> b
    java.lang.String className -> c
    boolean sealed -> d
    boolean privileged -> e
    java.lang.Object initializedValue -> f
    int state -> g
    void init() -> a
    java.lang.Object getValue() -> b
    java.lang.Object buildValue() -> c
    java.lang.Object buildValue0() -> d
    java.lang.Class cast(java.lang.Class) -> a
    java.lang.Object access$000(org.mozilla.javascript.LazilyLoadedCtor) -> a
org.mozilla.javascript.LazilyLoadedCtor$1 -> a.a.b.ba:
    org.mozilla.javascript.LazilyLoadedCtor this$0 -> a
    java.lang.Object run() -> run
org.mozilla.javascript.MemberBox -> a.a.b.bb:
    java.lang.reflect.Member memberObject -> d
    java.lang.Class[] argTypes -> a
    java.lang.Object delegateTo -> b
    boolean vararg -> c
    java.lang.Class[] primitives -> e
    void init(java.lang.reflect.Method) -> a
    void init(java.lang.reflect.Constructor) -> a
    java.lang.reflect.Method method() -> a
    java.lang.reflect.Constructor ctor() -> b
    java.lang.reflect.Member member() -> c
    boolean isMethod() -> d
    boolean isCtor() -> e
    boolean isStatic() -> f
    java.lang.String getName() -> g
    java.lang.Class getDeclaringClass() -> h
    java.lang.String toJavaDeclaration() -> i
    java.lang.String toString() -> toString
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
    java.lang.reflect.Method searchAccessibleMethod(java.lang.reflect.Method,java.lang.Class[]) -> a
org.mozilla.javascript.NativeArray -> a.a.b.bc:
    java.lang.Object ARRAY_TAG -> a
    java.lang.Integer NEGATIVE_ONE -> b
    long length -> c
    int lengthAttr -> e
    java.lang.Object[] dense -> f
    boolean denseOnly -> g
    int maximumInitialCapacity -> h
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    void setMaximumInitialCapacity(int) -> f
    java.lang.String getClassName() -> a
    int getMaxInstanceId() -> b
    void setInstanceIdAttributes(int,int) -> c
    int findInstanceIdInfo(java.lang.String) -> a
    java.lang.String getInstanceIdName(int) -> b
    java.lang.Object getInstanceIdValue(int) -> c
    void setInstanceIdValue(int,java.lang.Object) -> a
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    long toArrayIndex(java.lang.Object) -> a
    long toArrayIndex(java.lang.String) -> g
    long toArrayIndex(double) -> a
    int toDenseIndex(java.lang.Object) -> b
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    boolean ensureCapacity(int) -> i
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void delete(int) -> a
    java.lang.Object[] getIds() -> c_
    java.lang.Object[] getAllIds() -> e
    java.lang.Integer[] getIndexIds() -> f
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    org.mozilla.javascript.ScriptableObject defaultIndexPropertyDescriptor(java.lang.Object) -> i
    int getAttributes(int) -> g
    org.mozilla.javascript.ScriptableObject getOwnPropertyDescriptor(org.mozilla.javascript.Context,java.lang.Object) -> a
    void defineOwnProperty(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.ScriptableObject,boolean) -> a
    java.lang.Object jsConstructor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    long getLength() -> g
    void setDenseOnly(boolean) -> b
    void setLength(java.lang.Object) -> j
    long getLengthProperty(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object setLengthProperty(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,long) -> a
    void deleteElem(org.mozilla.javascript.Scriptable,long) -> a
    java.lang.Object getElem(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,long) -> b
    java.lang.Object getRawElem(org.mozilla.javascript.Scriptable,long) -> b
    void setElem(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,long,java.lang.Object) -> a
    void setRawElem(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,long,java.lang.Object) -> b
    java.lang.String toStringHelper(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,boolean,boolean) -> a
    java.lang.String js_join(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> b
    org.mozilla.javascript.Scriptable js_reverse(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> c
    org.mozilla.javascript.Scriptable js_sort(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object js_push(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> d
    java.lang.Object js_pop(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> e
    java.lang.Object js_shift(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> f
    java.lang.Object js_unshift(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> g
    java.lang.Object js_splice(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> b
    org.mozilla.javascript.Scriptable js_concat(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> c
    org.mozilla.javascript.Scriptable js_slice(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> h
    long toSliceIndex(double,long) -> a
    java.lang.Object indexOfHelper(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],boolean) -> a
    java.lang.Object iterativeMethod(org.mozilla.javascript.Context,int,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object reduceMethod(org.mozilla.javascript.Context,int,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> b
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean containsAll(java.util.Collection) -> containsAll
    int size() -> size
    java.lang.Object get(long) -> a
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
    java.util.List subList(int,int) -> subList
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeArray$1 -> a.a.b.bd:
    java.lang.Object[] val$cmpBuf -> a
    org.mozilla.javascript.Callable val$jsCompareFunction -> b
    org.mozilla.javascript.Context val$cx -> c
    org.mozilla.javascript.Scriptable val$scope -> d
    org.mozilla.javascript.Scriptable val$funThis -> e
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mozilla.javascript.NativeArray$2 -> a.a.b.be:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mozilla.javascript.NativeArray$3 -> a.a.b.bf:
    int cursor -> a
    int val$start -> b
    int val$len -> c
    org.mozilla.javascript.NativeArray this$0 -> d
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
org.mozilla.javascript.NativeBoolean -> a.a.b.bg:
    java.lang.Object BOOLEAN_TAG -> a
    boolean booleanValue -> b
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeCall -> a.a.b.bh:
    java.lang.Object CALL_TAG -> e
    org.mozilla.javascript.NativeFunction function -> a
    java.lang.Object[] originalArgs -> b
    org.mozilla.javascript.NativeCall parentActivationCall -> c
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    int findPrototypeId(java.lang.String) -> b
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.NativeContinuation -> a.a.b.bi:
    java.lang.Object FTAG -> a
    java.lang.Object implementation -> b
    java.lang.Object getImplementation() -> f
    void initImplementation(java.lang.Object) -> a
    java.lang.String getClassName() -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    boolean isContinuationConstructor(org.mozilla.javascript.IdFunctionObject) -> b
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeDate -> a.a.b.bj:
    java.lang.Object DATE_TAG -> a
    java.text.DateFormat isoFormat -> b
    java.util.TimeZone thisTimeZone -> c
    double LocalTZA -> e
    java.text.DateFormat timeZoneFormatter -> f
    java.text.DateFormat localeDateTimeFormatter -> g
    java.text.DateFormat localeDateFormatter -> h
    java.text.DateFormat localeTimeFormatter -> i
    double date -> k
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    double getJSTimeValue() -> f
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.String toISOString() -> g
    double Day(double) -> a
    double TimeWithinDay(double) -> b
    boolean IsLeapYear(int) -> f
    double DayFromYear(double) -> c
    double TimeFromYear(double) -> d
    int YearFromTime(double) -> e
    double DayFromMonth(int,int) -> a
    int MonthFromTime(double) -> f
    int DateFromTime(double) -> g
    int WeekDay(double) -> h
    double now() -> h
    double DaylightSavingTA(double) -> i
    int EquivalentYear(int) -> i
    double LocalTime(double) -> j
    double internalUTC(double) -> k
    int HourFromTime(double) -> l
    int MinFromTime(double) -> m
    int SecFromTime(double) -> n
    int msFromTime(double) -> o
    double MakeTime(double,double,double,double) -> a
    double MakeDay(double,double,double) -> a
    double MakeDate(double,double) -> a
    double TimeClip(double) -> p
    double date_msecFromDate(double,double,double,double,double,double,double) -> a
    double date_msecFromArgs(java.lang.Object[]) -> a
    double jsStaticFunction_UTC(java.lang.Object[]) -> b
    double date_parseString(java.lang.String) -> g
    java.lang.String date_format(double,int) -> a
    java.lang.Object jsConstructor(java.lang.Object[]) -> c
    java.lang.String toLocale_helper(double,int) -> b
    java.lang.String js_toUTCString(double) -> q
    void append0PaddedUint(java.lang.StringBuffer,int,int) -> a
    void appendMonthName(java.lang.StringBuffer,int) -> a
    void appendWeekDayName(java.lang.StringBuffer,int) -> b
    double makeTime(double,java.lang.Object[],int) -> a
    double makeDate(double,java.lang.Object[],int) -> b
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeError -> a.a.b.bk:
    java.lang.Object ERROR_TAG -> a
    org.mozilla.javascript.RhinoException stackProvider -> b
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    org.mozilla.javascript.NativeError make(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject,java.lang.Object[]) -> a
    java.lang.String getClassName() -> a
    java.lang.String toString() -> toString
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    void setStackProvider(org.mozilla.javascript.RhinoException) -> a
    java.lang.Object getStack() -> f
    void setStack(java.lang.Object) -> a
    java.lang.Object js_toString(org.mozilla.javascript.Scriptable) -> i
    java.lang.String js_toSource(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeFunction -> a.a.b.bl:
    void initScriptFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> c
    java.lang.String decompile(int,int) -> a
    int getLength() -> f
    int getArity() -> a_
    java.lang.String getEncodedSource() -> k
    java.lang.Object resumeGenerator(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int,java.lang.Object,java.lang.Object) -> a
    int getLanguageVersion() -> m
    int getParamCount() -> n
    int getParamAndVarCount() -> o
    java.lang.String getParamOrVarName(int) -> f
    boolean getParamOrVarConst(int) -> a_
org.mozilla.javascript.NativeGenerator -> a.a.b.bm:
    java.lang.Object GENERATOR_TAG -> a
    org.mozilla.javascript.NativeFunction function -> b
    java.lang.Object savedState -> c
    java.lang.String lineSource -> e
    int lineNumber -> f
    boolean firstTime -> g
    boolean locked -> h
    org.mozilla.javascript.NativeGenerator init(org.mozilla.javascript.ScriptableObject,boolean) -> a
    java.lang.String getClassName() -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object resume(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int,java.lang.Object) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeGenerator$GeneratorClosedException -> a.a.b.bn:
org.mozilla.javascript.NativeGlobal -> a.a.b.bo:
    java.lang.Object FTAG -> a
    void init(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object js_parseInt(java.lang.Object[]) -> a
    java.lang.Object js_parseFloat(java.lang.Object[]) -> b
    java.lang.Object js_escape(java.lang.Object[]) -> c
    java.lang.Object js_unescape(java.lang.Object[]) -> d
    java.lang.Object js_eval(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    boolean isEvalFunction(java.lang.Object) -> a
    java.lang.String encode(java.lang.String,boolean) -> a
    char toHexChar(int) -> a
    int unHex(char) -> a
    int unHex(char,char) -> a
    java.lang.String decode(java.lang.String,boolean) -> b
    boolean encodeUnescaped(char,boolean) -> a
    org.mozilla.javascript.EcmaError uriError() -> a
    int oneUcs4ToUtf8Char(byte[],int) -> a
org.mozilla.javascript.NativeIterator -> a.a.b.bp:
    java.lang.Object ITERATOR_TAG -> a
    java.lang.Object objectIterator -> b
    void init(org.mozilla.javascript.ScriptableObject,boolean) -> a
    java.lang.Object getStopIterationObject(org.mozilla.javascript.Scriptable) -> b
    java.lang.String getClassName() -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object jsConstructor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object next(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeIterator$StopIteration -> a.a.b.bq:
    java.lang.String getClassName() -> a
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
org.mozilla.javascript.NativeIterator$WrappedJavaIterator -> a.a.b.br:
    java.util.Iterator iterator -> a
    org.mozilla.javascript.Scriptable scope -> b
org.mozilla.javascript.NativeJSON -> a.a.b.bs:
    java.lang.Object JSON_TAG -> a
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object parse(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> a
    java.lang.Object parse(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Callable) -> a
    java.lang.Object walk(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.String repeat(char,int) -> a
    java.lang.Object stringify(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object str(java.lang.Object,org.mozilla.javascript.Scriptable,org.mozilla.javascript.NativeJSON$StringifyState) -> a
    java.lang.String join(java.util.Collection,java.lang.String) -> a
    java.lang.String jo(org.mozilla.javascript.Scriptable,org.mozilla.javascript.NativeJSON$StringifyState) -> a
    java.lang.String ja(org.mozilla.javascript.NativeArray,org.mozilla.javascript.NativeJSON$StringifyState) -> a
    java.lang.String quote(java.lang.String) -> g
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeJSON$StringifyState -> a.a.b.bt:
    java.util.Stack stack -> a
    java.lang.String indent -> b
    java.lang.String gap -> c
    org.mozilla.javascript.Callable replacer -> d
    java.util.List propertyList -> e
    java.lang.Object space -> f
    org.mozilla.javascript.Context cx -> g
    org.mozilla.javascript.Scriptable scope -> h
org.mozilla.javascript.NativeJavaArray -> a.a.b.bu:
    java.lang.Object array -> a
    int length -> b
    java.lang.Class cls -> c
    java.lang.String getClassName() -> a
    org.mozilla.javascript.NativeJavaArray wrap(org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.Object unwrap() -> b
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    java.lang.Object[] getIds() -> c_
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Scriptable getPrototype() -> l
org.mozilla.javascript.NativeJavaClass -> a.a.b.bv:
    java.util.Map staticFieldAndMethods -> a
    void initMembers() -> c
    java.lang.String getClassName() -> a
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    java.lang.Object[] getIds() -> c_
    java.lang.Class getClassObject() -> e
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable constructSpecific(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.MemberBox) -> a
    java.lang.Object constructInternal(java.lang.Object[],org.mozilla.javascript.MemberBox) -> a
    java.lang.String toString() -> toString
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    java.lang.Class findNestedClass(java.lang.Class,java.lang.String) -> a
org.mozilla.javascript.NativeJavaConstructor -> a.a.b.bw:
    org.mozilla.javascript.MemberBox ctor -> a
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.String getFunctionName() -> g
    java.lang.String toString() -> toString
org.mozilla.javascript.NativeJavaMethod -> a.a.b.bx:
    org.mozilla.javascript.MemberBox[] methods -> c
    java.lang.String functionName -> a
    java.util.LinkedList overloadCache -> b
    java.lang.String getFunctionName() -> g
    java.lang.String scriptSignature(java.lang.Object[]) -> a
    java.lang.String decompile(int,int) -> a
    java.lang.String toString() -> toString
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    int findCachedFunction(org.mozilla.javascript.Context,java.lang.Object[]) -> a
    int findFunction(org.mozilla.javascript.Context,org.mozilla.javascript.MemberBox[],java.lang.Object[]) -> a
    int preferSignature(java.lang.Object[],java.lang.Class[],boolean,java.lang.Class[],boolean) -> a
org.mozilla.javascript.NativeJavaObject -> a.a.b.by:
    org.mozilla.javascript.Scriptable prototype -> d
    org.mozilla.javascript.Scriptable parent -> e
    java.lang.Object javaObject -> f
    java.lang.Class staticType -> g
    org.mozilla.javascript.JavaMembers members -> h
    java.util.Map fieldAndMethods -> a
    boolean isAdapter -> i
    java.lang.Object COERCED_INTERFACE_KEY -> b
    java.lang.reflect.Method adapter_writeAdapterObject -> c
    java.lang.reflect.Method adapter_readAdapterObject -> k
    void initMembers() -> c
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    void delete(java.lang.String) -> e
    void delete(int) -> a
    org.mozilla.javascript.Scriptable getPrototype() -> l
    void setPrototype(org.mozilla.javascript.Scriptable) -> a_
    org.mozilla.javascript.Scriptable getParentScope() -> b_
    void setParentScope(org.mozilla.javascript.Scriptable) -> b_
    java.lang.Object[] getIds() -> c_
    java.lang.Object unwrap() -> b
    java.lang.String getClassName() -> a
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    boolean canConvert(java.lang.Object,java.lang.Class) -> a
    int getConversionWeight(java.lang.Object,java.lang.Class) -> b
    int getSizeRank(java.lang.Class) -> b
    int getJSTypeCode(java.lang.Object) -> a
    java.lang.Object coerceTypeImpl(java.lang.Class,java.lang.Object) -> a
    java.lang.Object createInterfaceAdapter(java.lang.Class,org.mozilla.javascript.ScriptableObject) -> a
    java.lang.Object coerceToNumber(java.lang.Class,java.lang.Object) -> b
    double toDouble(java.lang.Object) -> b
    long toInteger(java.lang.Object,java.lang.Class,double,double) -> a
    void reportConversionError(java.lang.Object,java.lang.Class) -> c
org.mozilla.javascript.NativeMath -> a.a.b.bz:
    java.lang.Object MATH_TAG -> a
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    double js_pow(double,double) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeNumber -> a.a.b.ca:
    java.lang.Object NUMBER_TAG -> a
    double doubleValue -> b
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.String toString() -> toString
    java.lang.String num_to(double,java.lang.Object[],int,int,int,int) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeObject -> a.a.b.cb:
    java.lang.Object OBJECT_TAG -> a
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    java.lang.String toString() -> toString
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeObject$EntrySet -> a.a.b.cc:
    org.mozilla.javascript.NativeObject this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.mozilla.javascript.NativeObject$EntrySet$1 -> a.a.b.cd:
    java.lang.Object[] ids -> a
    java.lang.Object key -> b
    int index -> c
    org.mozilla.javascript.NativeObject$EntrySet this$1 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.mozilla.javascript.NativeObject$EntrySet$1$1 -> a.a.b.ce:
    java.lang.Object val$ekey -> a
    java.lang.Object val$value -> b
    org.mozilla.javascript.NativeObject$EntrySet$1 this$2 -> c
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.mozilla.javascript.NativeObject$KeySet -> a.a.b.cf:
    org.mozilla.javascript.NativeObject this$0 -> a
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.mozilla.javascript.NativeObject$KeySet$1 -> a.a.b.cg:
    java.lang.Object[] ids -> a
    java.lang.Object key -> b
    int index -> c
    org.mozilla.javascript.NativeObject$KeySet this$1 -> d
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.mozilla.javascript.NativeObject$ValueCollection -> a.a.b.ch:
    org.mozilla.javascript.NativeObject this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.mozilla.javascript.NativeObject$ValueCollection$1 -> a.a.b.ci:
    java.lang.Object[] ids -> a
    java.lang.Object key -> b
    int index -> c
    org.mozilla.javascript.NativeObject$ValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.mozilla.javascript.NativeScript -> a.a.b.cj:
    java.lang.Object SCRIPT_TAG -> a
    org.mozilla.javascript.Script script -> b
    void init(org.mozilla.javascript.Scriptable,boolean) -> b
    java.lang.String getClassName() -> a
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    int getLength() -> f
    int getArity() -> a_
    java.lang.String decompile(int,int) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.NativeScript realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject) -> a
    org.mozilla.javascript.Script compile(org.mozilla.javascript.Context,java.lang.String) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeString -> a.a.b.ck:
    java.lang.Object STRING_TAG -> a
    java.lang.CharSequence string -> b
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    int getMaxInstanceId() -> b
    int findInstanceIdInfo(java.lang.String) -> a
    java.lang.String getInstanceIdName(int) -> b
    java.lang.Object getInstanceIdValue(int) -> c
    void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.NativeString realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject) -> a
    java.lang.String tagify(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object[]) -> a
    java.lang.CharSequence toCharSequence() -> g
    java.lang.String toString() -> toString
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    int js_indexOf(java.lang.String,java.lang.Object[]) -> a
    int js_lastIndexOf(java.lang.String,java.lang.Object[]) -> b
    java.lang.CharSequence js_substring(org.mozilla.javascript.Context,java.lang.CharSequence,java.lang.Object[]) -> a
    int getLength() -> h
    java.lang.CharSequence js_substr(java.lang.CharSequence,java.lang.Object[]) -> a
    java.lang.String js_concat(java.lang.String,java.lang.Object[]) -> c
    java.lang.CharSequence js_slice(java.lang.CharSequence,java.lang.Object[]) -> b
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.NativeWith -> a.a.b.cl:
    java.lang.Object FTAG -> c
    org.mozilla.javascript.Scriptable prototype -> a
    org.mozilla.javascript.Scriptable parent -> b
    void init(org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.String getClassName() -> a
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void delete(java.lang.String) -> e
    void delete(int) -> a
    org.mozilla.javascript.Scriptable getPrototype() -> l
    void setPrototype(org.mozilla.javascript.Scriptable) -> a_
    org.mozilla.javascript.Scriptable getParentScope() -> b_
    void setParentScope(org.mozilla.javascript.Scriptable) -> b_
    java.lang.Object[] getIds() -> c_
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    java.lang.Object updateDotQuery(boolean) -> a
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    boolean isWithFunction(java.lang.Object) -> a
    java.lang.Object newWithSpecial(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.Node -> a.a.b.cm:
    org.mozilla.javascript.Node NOT_SET -> g
    int type -> a
    org.mozilla.javascript.Node next -> b
    org.mozilla.javascript.Node first -> c
    org.mozilla.javascript.Node last -> d
    int lineno -> e
    org.mozilla.javascript.Node$PropListItem propListHead -> f
    org.mozilla.javascript.Node newNumber(double) -> a
    org.mozilla.javascript.Node newString(java.lang.String) -> a
    org.mozilla.javascript.Node newString(int,java.lang.String) -> a
    int getType() -> a
    org.mozilla.javascript.Node setType(int) -> a
    void setJsDocNode(org.mozilla.javascript.ast.Comment) -> a
    boolean hasChildren() -> b
    org.mozilla.javascript.Node getFirstChild() -> c
    org.mozilla.javascript.Node getLastChild() -> d
    org.mozilla.javascript.Node getNext() -> e
    org.mozilla.javascript.Node getChildBefore(org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node getLastSibling() -> f
    void addChildToFront(org.mozilla.javascript.Node) -> b
    void addChildToBack(org.mozilla.javascript.Node) -> c
    void addChildrenToFront(org.mozilla.javascript.Node) -> d
    void addChildrenToBack(org.mozilla.javascript.Node) -> e
    void addChildBefore(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void addChildAfter(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
    void removeChild(org.mozilla.javascript.Node) -> f
    void replaceChild(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> c
    void replaceChildAfter(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> d
    void removeChildren() -> g
    java.util.Iterator iterator() -> iterator
    org.mozilla.javascript.Node$PropListItem lookupProperty(int) -> g
    org.mozilla.javascript.Node$PropListItem ensureProperty(int) -> h
    void removeProp(int) -> b
    java.lang.Object getProp(int) -> c
    int getIntProp(int,int) -> a
    int getExistingIntProp(int) -> d
    void putProp(int,java.lang.Object) -> a
    void putIntProp(int,int) -> b
    int getLineno() -> h
    void setLineno(int) -> e
    double getDouble() -> i
    void setDouble(double) -> b
    java.lang.String getString() -> j
    void setString(java.lang.String) -> b
    org.mozilla.javascript.ast.Scope getScope() -> k
    void setScope(org.mozilla.javascript.ast.Scope) -> a
    org.mozilla.javascript.Node newTarget() -> l
    int labelId() -> m
    void labelId(int) -> f
    boolean hasConsistentReturnUsage() -> n
    int endCheckIf() -> r
    int endCheckSwitch() -> s
    int endCheckTry() -> t
    int endCheckLoop() -> u
    int endCheckBlock() -> v
    int endCheckLabel() -> w
    int endCheckBreak() -> x
    int endCheck() -> y
    boolean hasSideEffects() -> o
    void resetTargets() -> p
    void resetTargets_r() -> z
    java.lang.String toString() -> toString
    org.mozilla.javascript.Node access$000() -> q
org.mozilla.javascript.Node$1 -> a.a.b.cn:
org.mozilla.javascript.Node$NodeIterator -> a.a.b.co:
    org.mozilla.javascript.Node cursor -> b
    org.mozilla.javascript.Node prev -> c
    org.mozilla.javascript.Node prev2 -> d
    boolean removed -> e
    org.mozilla.javascript.Node this$0 -> a
    boolean hasNext() -> hasNext
    org.mozilla.javascript.Node next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.mozilla.javascript.Node$PropListItem -> a.a.b.cp:
    org.mozilla.javascript.Node$PropListItem next -> a
    int type -> b
    int intValue -> c
    java.lang.Object objectValue -> d
org.mozilla.javascript.NodeTransformer -> a.a.b.cq:
    org.mozilla.javascript.ObjArray loops -> a
    org.mozilla.javascript.ObjArray loopEnds -> b
    boolean hasFinally -> c
    void transform(org.mozilla.javascript.ast.ScriptNode) -> a
    void transformCompilationUnit(org.mozilla.javascript.ast.ScriptNode) -> b
    void transformCompilationUnit_r(org.mozilla.javascript.ast.ScriptNode,org.mozilla.javascript.Node,org.mozilla.javascript.ast.Scope,boolean,boolean) -> a
    void visitNew(org.mozilla.javascript.Node,org.mozilla.javascript.ast.ScriptNode) -> a
    void visitCall(org.mozilla.javascript.Node,org.mozilla.javascript.ast.ScriptNode) -> b
    org.mozilla.javascript.Node visitLet(boolean,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node addBeforeCurrent(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node replaceCurrent(org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
org.mozilla.javascript.ObjArray -> a.a.b.cr:
    int size -> a
    boolean sealed -> b
    java.lang.Object f0 -> c
    java.lang.Object f1 -> d
    java.lang.Object f2 -> e
    java.lang.Object f3 -> f
    java.lang.Object f4 -> g
    java.lang.Object[] data -> h
    boolean isEmpty() -> a
    int size() -> b
    java.lang.Object get(int) -> a
    java.lang.Object getImpl(int) -> b
    void setImpl(int,java.lang.Object) -> a
    java.lang.Object peek() -> c
    java.lang.Object pop() -> d
    void push(java.lang.Object) -> a
    void add(java.lang.Object) -> b
    java.lang.Object[] toArray() -> e
    void toArray(java.lang.Object[]) -> a
    void toArray(java.lang.Object[],int) -> a
    void ensureCapacity(int) -> c
    java.lang.RuntimeException onInvalidIndex(int,int) -> a
    java.lang.RuntimeException onEmptyStackTopRead() -> f
    java.lang.RuntimeException onSeledMutation() -> g
org.mozilla.javascript.ObjToIntMap -> a.a.b.cs:
    java.lang.Object DELETED -> a
    java.lang.Object[] keys -> b
    int[] values -> c
    int power -> d
    int keyCount -> e
    int occupiedCount -> f
    boolean isEmpty() -> a
    int size() -> b
    boolean has(java.lang.Object) -> a
    int get(java.lang.Object,int) -> a
    int getExisting(java.lang.Object) -> b
    void put(java.lang.Object,int) -> b
    java.lang.Object intern(java.lang.Object) -> c
    org.mozilla.javascript.ObjToIntMap$Iterator newIterator() -> c
    void initIterator(org.mozilla.javascript.ObjToIntMap$Iterator) -> a
    java.lang.Object[] getKeys() -> d
    void getKeys(java.lang.Object[],int) -> a
    int tableLookupStep(int,int,int) -> a
    int findIndex(java.lang.Object) -> d
    int insertNewKey(java.lang.Object,int) -> c
    void rehashTable() -> f
    int ensureIndex(java.lang.Object) -> e
    java.lang.Object access$000() -> e
org.mozilla.javascript.ObjToIntMap$Iterator -> a.a.b.ct:
    org.mozilla.javascript.ObjToIntMap master -> a
    int cursor -> b
    int remaining -> c
    java.lang.Object[] keys -> d
    int[] values -> e
    void init(java.lang.Object[],int[],int) -> a
    void start() -> a
    boolean done() -> b
    void next() -> c
    java.lang.Object getKey() -> d
    int getValue() -> e
org.mozilla.javascript.Parser -> a.a.b.cu:
    org.mozilla.javascript.CompilerEnvirons compilerEnv -> a
    org.mozilla.javascript.ErrorReporter errorReporter -> g
    org.mozilla.javascript.ast.IdeErrorReporter errorCollector -> h
    java.lang.String sourceURI -> i
    char[] sourceChars -> j
    boolean calledByCompileFunction -> b
    boolean parseFinished -> k
    org.mozilla.javascript.TokenStream ts -> l
    int currentFlaggedToken -> m
    int currentToken -> n
    int syntaxErrorCount -> o
    java.util.List scannedComments -> p
    org.mozilla.javascript.ast.Comment currentJsDocComment -> q
    int nestingOfFunction -> c
    org.mozilla.javascript.ast.LabeledStatement currentLabel -> r
    boolean inDestructuringAssignment -> s
    boolean inUseStrictDirective -> d
    org.mozilla.javascript.ast.ScriptNode currentScriptOrFn -> e
    org.mozilla.javascript.ast.Scope currentScope -> f
    int endFlags -> t
    boolean inForInit -> u
    java.util.Map labelSet -> v
    java.util.List loopSet -> w
    java.util.List loopAndSwitchSet -> x
    int prevNameTokenStart -> y
    java.lang.String prevNameTokenString -> z
    int prevNameTokenLineno -> A
    void addStrictWarning(java.lang.String,java.lang.String) -> a
    void addStrictWarning(java.lang.String,java.lang.String,int,int) -> a
    void addWarning(java.lang.String,java.lang.String) -> b
    void addWarning(java.lang.String,int,int) -> a
    void addWarning(java.lang.String,java.lang.String,int,int) -> b
    void addError(java.lang.String) -> a
    void addError(java.lang.String,int,int) -> b
    void addError(java.lang.String,java.lang.String) -> c
    void addError(java.lang.String,java.lang.String,int,int) -> c
    java.lang.String lookupMessage(java.lang.String) -> b
    java.lang.String lookupMessage(java.lang.String,java.lang.String) -> d
    void reportError(java.lang.String) -> c
    void reportError(java.lang.String,java.lang.String) -> e
    void reportError(java.lang.String,int,int) -> c
    void reportError(java.lang.String,java.lang.String,int,int) -> d
    int getNodeEnd(org.mozilla.javascript.ast.AstNode) -> a
    void recordComment(int,java.lang.String) -> b
    org.mozilla.javascript.ast.Comment getAndResetJsDoc() -> e
    int getNumberOfEols(java.lang.String) -> e
    int peekToken() -> f
    int peekFlaggedToken() -> g
    void consumeToken() -> h
    int nextToken() -> i
    int nextFlaggedToken() -> j
    boolean matchToken(int) -> a
    int peekTokenOrEOL() -> k
    boolean mustMatchToken(int,java.lang.String) -> c
    boolean mustMatchToken(int,java.lang.String,int,int) -> a
    void mustHaveXML() -> l
    boolean insideFunction() -> a
    void pushScope(org.mozilla.javascript.ast.Scope) -> a
    void popScope() -> b
    void enterLoop(org.mozilla.javascript.ast.Loop) -> a
    void exitLoop() -> m
    void enterSwitch(org.mozilla.javascript.ast.SwitchStatement) -> a
    void exitSwitch() -> n
    org.mozilla.javascript.ast.AstRoot parse(java.lang.String,java.lang.String,int) -> a
    org.mozilla.javascript.ast.AstRoot parse(java.io.Reader,java.lang.String,int) -> a
    org.mozilla.javascript.ast.AstRoot parse() -> o
    org.mozilla.javascript.ast.AstNode parseFunctionBody() -> p
    java.lang.String getDirective(org.mozilla.javascript.ast.AstNode) -> b
    void parseFunctionParams(org.mozilla.javascript.ast.FunctionNode) -> a
    org.mozilla.javascript.ast.FunctionNode function(int) -> b
    org.mozilla.javascript.ast.AstNode statements(org.mozilla.javascript.ast.AstNode) -> e
    org.mozilla.javascript.ast.AstNode statements() -> q
    org.mozilla.javascript.Parser$ConditionData condition() -> r
    org.mozilla.javascript.ast.AstNode statement() -> s
    org.mozilla.javascript.ast.AstNode statementHelper() -> t
    void autoInsertSemicolon(org.mozilla.javascript.ast.AstNode) -> f
    org.mozilla.javascript.ast.IfStatement ifStatement() -> u
    org.mozilla.javascript.ast.SwitchStatement switchStatement() -> v
    org.mozilla.javascript.ast.WhileLoop whileLoop() -> w
    org.mozilla.javascript.ast.DoLoop doLoop() -> x
    org.mozilla.javascript.ast.Loop forLoop() -> y
    org.mozilla.javascript.ast.AstNode forLoopInit(int) -> c
    org.mozilla.javascript.ast.TryStatement tryStatement() -> z
    org.mozilla.javascript.ast.ThrowStatement throwStatement() -> A
    org.mozilla.javascript.ast.LabeledStatement matchJumpLabelName() -> B
    org.mozilla.javascript.ast.BreakStatement breakStatement() -> C
    org.mozilla.javascript.ast.ContinueStatement continueStatement() -> D
    org.mozilla.javascript.ast.WithStatement withStatement() -> E
    org.mozilla.javascript.ast.AstNode letStatement() -> F
    boolean nowAllSet(int,int,int) -> a
    org.mozilla.javascript.ast.AstNode returnOrYield(int,boolean) -> a
    org.mozilla.javascript.ast.AstNode block() -> G
    org.mozilla.javascript.ast.AstNode defaultXmlNamespace() -> H
    void recordLabel(org.mozilla.javascript.ast.Label,org.mozilla.javascript.ast.LabeledStatement) -> a
    org.mozilla.javascript.ast.AstNode nameOrLabel() -> I
    org.mozilla.javascript.ast.VariableDeclaration variables(int,int,boolean) -> a
    org.mozilla.javascript.ast.AstNode let(boolean,int) -> a
    void defineSymbol(int,java.lang.String) -> a
    void defineSymbol(int,java.lang.String,boolean) -> a
    org.mozilla.javascript.ast.AstNode expr() -> J
    org.mozilla.javascript.ast.AstNode assignExpr() -> K
    org.mozilla.javascript.ast.AstNode condExpr() -> L
    org.mozilla.javascript.ast.AstNode orExpr() -> M
    org.mozilla.javascript.ast.AstNode andExpr() -> N
    org.mozilla.javascript.ast.AstNode bitOrExpr() -> O
    org.mozilla.javascript.ast.AstNode bitXorExpr() -> P
    org.mozilla.javascript.ast.AstNode bitAndExpr() -> Q
    org.mozilla.javascript.ast.AstNode eqExpr() -> R
    org.mozilla.javascript.ast.AstNode relExpr() -> S
    org.mozilla.javascript.ast.AstNode shiftExpr() -> T
    org.mozilla.javascript.ast.AstNode addExpr() -> U
    org.mozilla.javascript.ast.AstNode mulExpr() -> V
    org.mozilla.javascript.ast.AstNode unaryExpr() -> W
    org.mozilla.javascript.ast.AstNode xmlInitializer() -> X
    java.util.List argumentList() -> Y
    org.mozilla.javascript.ast.AstNode memberExpr(boolean) -> a
    org.mozilla.javascript.ast.AstNode memberExprTail(boolean,org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode propertyAccess(int,org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode attributeAccess() -> Z
    org.mozilla.javascript.ast.AstNode propertyName(int,java.lang.String,int) -> a
    org.mozilla.javascript.ast.XmlElemRef xmlElemRef(int,org.mozilla.javascript.ast.Name,int) -> a
    org.mozilla.javascript.ast.AstNode destructuringPrimaryExpr() -> aa
    org.mozilla.javascript.ast.AstNode primaryExpr() -> ab
    org.mozilla.javascript.ast.AstNode parenExpr() -> ac
    org.mozilla.javascript.ast.AstNode name(int,int) -> b
    org.mozilla.javascript.ast.AstNode arrayLiteral() -> ad
    org.mozilla.javascript.ast.AstNode arrayComprehension(org.mozilla.javascript.ast.AstNode,int) -> a
    org.mozilla.javascript.ast.ArrayComprehensionLoop arrayComprehensionLoop() -> ae
    org.mozilla.javascript.ast.AstNode generatorExpression(org.mozilla.javascript.ast.AstNode,int) -> b
    org.mozilla.javascript.ast.AstNode generatorExpression(org.mozilla.javascript.ast.AstNode,int,boolean) -> a
    org.mozilla.javascript.ast.GeneratorExpressionLoop generatorExpressionLoop() -> af
    org.mozilla.javascript.ast.ObjectLiteral objectLiteral() -> ag
    org.mozilla.javascript.ast.AstNode objliteralProperty() -> ah
    org.mozilla.javascript.ast.ObjectProperty plainProperty(org.mozilla.javascript.ast.AstNode,int) -> c
    org.mozilla.javascript.ast.ObjectProperty getterSetterProperty(int,org.mozilla.javascript.ast.AstNode,boolean) -> a
    org.mozilla.javascript.ast.Name createNameNode() -> ai
    org.mozilla.javascript.ast.Name createNameNode(boolean,int) -> b
    org.mozilla.javascript.ast.StringLiteral createStringLiteral() -> aj
    void checkActivationName(java.lang.String,int) -> a
    void setRequiresActivation() -> c
    void checkCallRequiresActivation(org.mozilla.javascript.ast.AstNode) -> g
    void setIsGenerator() -> d
    void checkBadIncDec(org.mozilla.javascript.ast.UnaryExpression) -> a
    org.mozilla.javascript.ast.ErrorNode makeErrorNode() -> ak
    int nodeEnd(org.mozilla.javascript.ast.AstNode) -> h
    void saveNameTokenData(int,java.lang.String,int) -> b
    int lineBeginningFor(int) -> d
    void warnMissingSemi(int,int) -> c
    void warnTrailingComma(int,java.util.List,int) -> a
    java.lang.String readFully(java.io.Reader) -> a
    org.mozilla.javascript.Node createDestructuringAssignment(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node destructuringAssignmentHelper(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node,java.lang.String) -> a
    boolean destructuringArray(org.mozilla.javascript.ast.ArrayLiteral,int,java.lang.String,org.mozilla.javascript.Node,java.util.List) -> a
    boolean destructuringObject(org.mozilla.javascript.ast.ObjectLiteral,int,java.lang.String,org.mozilla.javascript.Node,java.util.List) -> a
    org.mozilla.javascript.Node createName(java.lang.String) -> d
    org.mozilla.javascript.Node createName(int,java.lang.String,org.mozilla.javascript.Node) -> a
    org.mozilla.javascript.Node createNumber(double) -> a
    org.mozilla.javascript.ast.Scope createScopeNode(int,int) -> a
    org.mozilla.javascript.Node simpleAssignment(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void checkMutableReference(org.mozilla.javascript.Node) -> b
    org.mozilla.javascript.ast.AstNode removeParens(org.mozilla.javascript.ast.AstNode) -> c
    void markDestructuring(org.mozilla.javascript.ast.AstNode) -> d
    java.lang.RuntimeException codeBug() -> al
    java.util.Map access$200(org.mozilla.javascript.Parser) -> a
    java.util.Map access$202(org.mozilla.javascript.Parser,java.util.Map) -> a
    java.util.List access$300(org.mozilla.javascript.Parser) -> b
    java.util.List access$302(org.mozilla.javascript.Parser,java.util.List) -> a
    java.util.List access$400(org.mozilla.javascript.Parser) -> c
    java.util.List access$402(org.mozilla.javascript.Parser,java.util.List) -> b
    int access$500(org.mozilla.javascript.Parser) -> d
    int access$502(org.mozilla.javascript.Parser,int) -> a
    boolean access$600(org.mozilla.javascript.Parser) -> e
    boolean access$602(org.mozilla.javascript.Parser,boolean) -> a
org.mozilla.javascript.Parser$1 -> a.a.b.cv:
org.mozilla.javascript.Parser$ConditionData -> a.a.b.cw:
    org.mozilla.javascript.ast.AstNode condition -> a
    int lp -> b
    int rp -> c
org.mozilla.javascript.Parser$ParserException -> a.a.b.cx:
org.mozilla.javascript.Parser$PerFunctionVariables -> a.a.b.cy:
    org.mozilla.javascript.ast.ScriptNode savedCurrentScriptOrFn -> b
    org.mozilla.javascript.ast.Scope savedCurrentScope -> c
    int savedEndFlags -> d
    boolean savedInForInit -> e
    java.util.Map savedLabelSet -> f
    java.util.List savedLoopSet -> g
    java.util.List savedLoopAndSwitchSet -> h
    org.mozilla.javascript.Parser this$0 -> a
    void restore() -> a
org.mozilla.javascript.PolicySecurityController -> a.a.b.cz:
    byte[] secureCallerImplBytecode -> a
    java.util.Map callers -> b
    java.lang.Class getStaticSecurityDomainClassInternal() -> a
    org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader,java.lang.Object) -> a
    java.lang.Object getDynamicSecurityDomain(java.lang.Object) -> a
    java.lang.Object callWithDomain(java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    byte[] loadBytecode() -> e
    byte[] access$000() -> b
org.mozilla.javascript.PolicySecurityController$1 -> a.a.b.da:
    java.lang.ClassLoader val$parent -> a
    java.lang.Object val$securityDomain -> b
    org.mozilla.javascript.PolicySecurityController this$0 -> c
    java.lang.Object run() -> run
org.mozilla.javascript.PolicySecurityController$2 -> a.a.b.db:
    org.mozilla.javascript.Context val$cx -> a
    org.mozilla.javascript.PolicySecurityController this$0 -> b
    java.lang.Object run() -> run
org.mozilla.javascript.PolicySecurityController$3 -> a.a.b.dc:
    java.lang.ClassLoader val$classLoader -> a
    java.security.CodeSource val$codeSource -> b
    org.mozilla.javascript.PolicySecurityController this$0 -> c
    java.lang.Object run() -> run
org.mozilla.javascript.PolicySecurityController$Loader -> a.a.b.dd:
    java.security.CodeSource codeSource -> a
    java.lang.Class defineClass(java.lang.String,byte[]) -> a
    void linkClass(java.lang.Class) -> a
org.mozilla.javascript.PolicySecurityController$SecureCaller -> a.a.b.de:
    java.lang.Object call(org.mozilla.javascript.Callable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.Ref -> a.a.b.df:
    java.lang.Object get(org.mozilla.javascript.Context) -> a
    java.lang.Object set(org.mozilla.javascript.Context,java.lang.Object) -> a
    boolean delete(org.mozilla.javascript.Context) -> b
org.mozilla.javascript.RefCallable -> a.a.b.dg:
    org.mozilla.javascript.Ref refCall(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.RegExpProxy -> a.a.b.dh:
    boolean isRegExp(org.mozilla.javascript.Scriptable) -> a
    java.lang.Object compileRegExp(org.mozilla.javascript.Context,java.lang.String,java.lang.String) -> a
    org.mozilla.javascript.Scriptable wrapRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.Object action(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],int) -> a
    int find_split(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.String,org.mozilla.javascript.Scriptable,int[],int[],boolean[],java.lang.String[][]) -> a
    java.lang.Object js_split(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[]) -> a
org.mozilla.javascript.ResolvedOverload -> a.a.b.di:
    java.lang.Class[] types -> a
    int index -> b
    boolean matches(java.lang.Object[]) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.mozilla.javascript.RhinoException -> a.a.b.dj:
    boolean useMozillaStackStyle -> c
    java.lang.String sourceName -> d
    int lineNumber -> e
    java.lang.String lineSource -> f
    int columnNumber -> g
    java.lang.Object interpreterStackInfo -> a
    int[] interpreterLineData -> b
    java.lang.String getMessage() -> getMessage
    java.lang.String details() -> a
    java.lang.String sourceName() -> d
    void initSourceName(java.lang.String) -> a
    int lineNumber() -> e
    void initLineNumber(int) -> a
    void initColumnNumber(int) -> b
    java.lang.String lineSource() -> f
    void initLineSource(java.lang.String) -> b
    void recordErrorOrigin(java.lang.String,int,java.lang.String,int) -> a
    java.lang.String generateStackTrace() -> b
    java.lang.String getScriptStackTrace() -> g
    org.mozilla.javascript.ScriptStackElement[] getScriptStack() -> h
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
org.mozilla.javascript.RhinoSecurityManager -> a.a.b.dk:
    java.lang.Class getCurrentScriptClass() -> a
org.mozilla.javascript.Script -> a.a.b.dl:
    java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> b
org.mozilla.javascript.ScriptRuntime -> a.a.b.dm:
    org.mozilla.javascript.BaseFunction THROW_TYPE_ERROR -> z
    java.lang.Class BooleanClass -> a
    java.lang.Class ByteClass -> b
    java.lang.Class CharacterClass -> c
    java.lang.Class ClassClass -> d
    java.lang.Class DoubleClass -> e
    java.lang.Class FloatClass -> f
    java.lang.Class IntegerClass -> g
    java.lang.Class LongClass -> h
    java.lang.Class NumberClass -> i
    java.lang.Class ObjectClass -> j
    java.lang.Class ShortClass -> k
    java.lang.Class StringClass -> l
    java.lang.Class DateClass -> m
    java.lang.Class ContextClass -> n
    java.lang.Class ContextFactoryClass -> o
    java.lang.Class FunctionClass -> p
    java.lang.Class ScriptableObjectClass -> q
    java.lang.Class ScriptableClass -> r
    java.util.Locale ROOT_LOCALE -> s
    java.lang.Object LIBRARY_SCOPE_KEY -> A
    double NaN -> t
    double negativeZero -> u
    java.lang.Double NaNobj -> v
    org.mozilla.javascript.ScriptRuntime$MessageProvider messageProvider -> w
    java.lang.Object[] emptyArgs -> x
    java.lang.String[] emptyStrings -> y
    org.mozilla.javascript.BaseFunction typeErrorThrower() -> a
    org.mozilla.javascript.ScriptableObject initStandardObjects(org.mozilla.javascript.Context,org.mozilla.javascript.ScriptableObject,boolean) -> a
    java.lang.String[] getTopPackageNames() -> b
    org.mozilla.javascript.ScriptableObject getLibraryScopeOrNull(org.mozilla.javascript.Scriptable) -> a
    boolean isJSLineTerminator(int) -> a
    boolean isJSWhitespaceOrLineTerminator(int) -> b
    boolean isStrWhiteSpaceChar(int) -> c
    java.lang.Boolean wrapBoolean(boolean) -> a
    java.lang.Integer wrapInt(int) -> d
    java.lang.Number wrapNumber(double) -> a
    boolean toBoolean(java.lang.Object) -> a
    double toNumber(java.lang.Object) -> b
    double toNumber(java.lang.Object[],int) -> a
    double stringToNumber(java.lang.String,int,int) -> a
    double toNumber(java.lang.String) -> a
    java.lang.Object[] padArguments(java.lang.Object[],int) -> b
    java.lang.String escapeString(java.lang.String) -> b
    java.lang.String escapeString(java.lang.String,char) -> a
    boolean isValidIdentifierName(java.lang.String) -> c
    java.lang.CharSequence toCharSequence(java.lang.Object) -> c
    java.lang.String toString(java.lang.Object) -> d
    java.lang.String defaultObjectToString(org.mozilla.javascript.Scriptable) -> b
    java.lang.String toString(java.lang.Object[],int) -> c
    java.lang.String toString(double) -> b
    java.lang.String numberToString(double,int) -> a
    java.lang.String uneval(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.String defaultObjectToSource(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable toObject(org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    org.mozilla.javascript.Scriptable toObjectOrNull(org.mozilla.javascript.Context,java.lang.Object) -> a
    org.mozilla.javascript.Scriptable toObjectOrNull(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Scriptable toObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[]) -> a
    double toInteger(java.lang.Object) -> e
    double toInteger(double) -> c
    double toInteger(java.lang.Object[],int) -> d
    int toInt32(java.lang.Object) -> f
    int toInt32(java.lang.Object[],int) -> e
    int toInt32(double) -> d
    long toUint32(double) -> e
    long toUint32(java.lang.Object) -> g
    char toUint16(java.lang.Object) -> h
    java.lang.Object setDefaultNamespace(java.lang.Object,org.mozilla.javascript.Context) -> a
    org.mozilla.javascript.Function getExistingCtor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> a
    long indexFromString(java.lang.String) -> d
    java.lang.Object getIndexObject(java.lang.String) -> e
    java.lang.Object getIndexObject(double) -> f
    java.lang.String toStringIdOrIndex(org.mozilla.javascript.Context,java.lang.Object) -> b
    java.lang.Object getObjectElem(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object getObjectElem(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object getObjectElem(org.mozilla.javascript.Scriptable,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object getObjectProp(java.lang.Object,java.lang.String,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object getObjectProp(org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Context) -> a
    java.lang.Object getObjectPropNoWarn(java.lang.Object,java.lang.String,org.mozilla.javascript.Context) -> a
    java.lang.Object getObjectIndex(java.lang.Object,double,org.mozilla.javascript.Context) -> a
    java.lang.Object getObjectIndex(org.mozilla.javascript.Scriptable,int,org.mozilla.javascript.Context) -> a
    java.lang.Object setObjectElem(java.lang.Object,java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object setObjectElem(org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object setObjectProp(java.lang.Object,java.lang.String,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object setObjectProp(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object setObjectIndex(java.lang.Object,double,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object setObjectIndex(org.mozilla.javascript.Scriptable,int,java.lang.Object,org.mozilla.javascript.Context) -> a
    boolean deleteObjectElem(org.mozilla.javascript.Scriptable,java.lang.Object,org.mozilla.javascript.Context) -> b
    boolean hasObjectElem(org.mozilla.javascript.Scriptable,java.lang.Object,org.mozilla.javascript.Context) -> c
    java.lang.Object refGet(org.mozilla.javascript.Ref,org.mozilla.javascript.Context) -> a
    java.lang.Object refSet(org.mozilla.javascript.Ref,java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.Object refDel(org.mozilla.javascript.Ref,org.mozilla.javascript.Context) -> b
    boolean isSpecialProperty(java.lang.String) -> f
    org.mozilla.javascript.Ref specialRef(java.lang.Object,java.lang.String,org.mozilla.javascript.Context) -> b
    java.lang.Object delete(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context,boolean) -> a
    java.lang.Object name(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> b
    java.lang.Object nameOrFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.String,boolean) -> a
    java.lang.Object topScopeName(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> d
    org.mozilla.javascript.Scriptable bind(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> c
    java.lang.Object setName(org.mozilla.javascript.Scriptable,java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> a
    java.lang.Object strictSetName(org.mozilla.javascript.Scriptable,java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> b
    java.lang.Object setConst(org.mozilla.javascript.Scriptable,java.lang.Object,org.mozilla.javascript.Context,java.lang.String) -> a
    org.mozilla.javascript.Scriptable toIterator(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,boolean) -> a
    java.lang.Object enumInit(java.lang.Object,org.mozilla.javascript.Context,int) -> a
    void setEnumNumbers(java.lang.Object,boolean) -> a
    java.lang.Boolean enumNext(java.lang.Object) -> i
    java.lang.Object enumId(java.lang.Object,org.mozilla.javascript.Context) -> b
    java.lang.Object enumValue(java.lang.Object,org.mozilla.javascript.Context) -> c
    void enumChangeObject(org.mozilla.javascript.ScriptRuntime$IdEnumeration) -> a
    org.mozilla.javascript.Callable getNameFunctionAndThis(java.lang.String,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Callable getElemFunctionAndThis(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> b
    org.mozilla.javascript.Callable getPropFunctionAndThis(java.lang.Object,java.lang.String,org.mozilla.javascript.Context) -> c
    org.mozilla.javascript.Callable getPropFunctionAndThis(java.lang.Object,java.lang.String,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> b
    org.mozilla.javascript.Callable getPropFunctionAndThisHelper(java.lang.Object,java.lang.String,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> c
    org.mozilla.javascript.Callable getValueFunctionAndThis(java.lang.Object,org.mozilla.javascript.Context) -> d
    org.mozilla.javascript.Ref callRef(org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Context) -> a
    org.mozilla.javascript.Scriptable newObject(java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object callSpecial(org.mozilla.javascript.Context,org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,int,java.lang.String,int) -> a
    java.lang.Object newSpecial(org.mozilla.javascript.Context,java.lang.Object,java.lang.Object[],org.mozilla.javascript.Scriptable,int) -> a
    java.lang.Object applyOrCall(boolean,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object[] getApplyArguments(org.mozilla.javascript.Context,java.lang.Object) -> c
    org.mozilla.javascript.Callable getCallable(org.mozilla.javascript.Scriptable) -> c
    java.lang.Object evalSpecial(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object[],java.lang.String,int) -> a
    java.lang.String typeof(java.lang.Object) -> j
    java.lang.String typeofName(org.mozilla.javascript.Scriptable,java.lang.String) -> a
    java.lang.Object add(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> c
    java.lang.Object nameIncrDecr(org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Context,int) -> a
    java.lang.Object propIncrDecr(java.lang.Object,java.lang.String,org.mozilla.javascript.Context,int) -> a
    java.lang.Object doScriptableIncrDecr(org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object,int) -> a
    java.lang.Object elemIncrDecr(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context,int) -> a
    java.lang.Object refIncrDecr(org.mozilla.javascript.Ref,org.mozilla.javascript.Context,int) -> a
    java.lang.Object toPrimitive(java.lang.Object) -> k
    java.lang.Object toPrimitive(java.lang.Object,java.lang.Class) -> a
    boolean eq(java.lang.Object,java.lang.Object) -> a
    boolean isPrimitive(java.lang.Object) -> l
    boolean eqNumber(double,java.lang.Object) -> a
    boolean eqString(java.lang.CharSequence,java.lang.Object) -> a
    boolean shallowEq(java.lang.Object,java.lang.Object) -> b
    boolean instanceOf(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> d
    boolean jsDelegatesTo(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> a
    boolean in(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context) -> e
    boolean cmp_LT(java.lang.Object,java.lang.Object) -> c
    boolean cmp_LE(java.lang.Object,java.lang.Object) -> d
    boolean hasTopCall(org.mozilla.javascript.Context) -> a
    org.mozilla.javascript.Scriptable getTopCallScope(org.mozilla.javascript.Context) -> b
    java.lang.Object doTopCall(org.mozilla.javascript.Callable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable checkDynamicScope(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> b
    void initScript(org.mozilla.javascript.NativeFunction,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,boolean) -> a
    org.mozilla.javascript.Scriptable createFunctionActivation(org.mozilla.javascript.NativeFunction,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    void enterActivationFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    void exitActivationFunction(org.mozilla.javascript.Context) -> c
    org.mozilla.javascript.NativeCall findFunctionActivation(org.mozilla.javascript.Context,org.mozilla.javascript.Function) -> a
    org.mozilla.javascript.Scriptable newCatchScope(java.lang.Throwable,org.mozilla.javascript.Scriptable,java.lang.String,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    boolean isVisible(org.mozilla.javascript.Context,java.lang.Object) -> d
    org.mozilla.javascript.Scriptable enterWith(java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Scriptable leaveWith(org.mozilla.javascript.Scriptable) -> d
    org.mozilla.javascript.Scriptable enterDotQuery(java.lang.Object,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object updateDotQuery(boolean,org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Scriptable leaveDotQuery(org.mozilla.javascript.Scriptable) -> e
    void setFunctionProtoAndParent(org.mozilla.javascript.BaseFunction,org.mozilla.javascript.Scriptable) -> a
    void setObjectProtoAndParent(org.mozilla.javascript.ScriptableObject,org.mozilla.javascript.Scriptable) -> a
    void setBuiltinProtoAndParent(org.mozilla.javascript.ScriptableObject,org.mozilla.javascript.Scriptable,org.mozilla.javascript.TopLevel$Builtins) -> a
    void initFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.NativeFunction,int,boolean) -> a
    org.mozilla.javascript.Scriptable newArrayLiteral(java.lang.Object[],int[],org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.Scriptable newObjectLiteral(java.lang.Object[],java.lang.Object[],int[],org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object[] getArrayElements(org.mozilla.javascript.Scriptable) -> f
    void checkDeprecated(org.mozilla.javascript.Context,java.lang.String) -> a
    java.lang.String getMessage0(java.lang.String) -> g
    java.lang.String getMessage1(java.lang.String,java.lang.Object) -> a
    java.lang.String getMessage2(java.lang.String,java.lang.Object,java.lang.Object) -> a
    java.lang.String getMessage3(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.String getMessage4(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.String getMessage(java.lang.String,java.lang.Object[]) -> a
    org.mozilla.javascript.EcmaError constructError(java.lang.String,java.lang.String) -> a
    org.mozilla.javascript.EcmaError constructError(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int) -> a
    org.mozilla.javascript.EcmaError typeError(java.lang.String) -> h
    org.mozilla.javascript.EcmaError typeError0(java.lang.String) -> i
    org.mozilla.javascript.EcmaError typeError1(java.lang.String,java.lang.String) -> b
    org.mozilla.javascript.EcmaError typeError2(java.lang.String,java.lang.String,java.lang.String) -> a
    org.mozilla.javascript.EcmaError typeError3(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.RuntimeException undefReadError(java.lang.Object,java.lang.Object) -> e
    java.lang.RuntimeException undefCallError(java.lang.Object,java.lang.Object) -> f
    java.lang.RuntimeException undefWriteError(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.RuntimeException notFoundError(org.mozilla.javascript.Scriptable,java.lang.String) -> b
    java.lang.RuntimeException notFunctionError(java.lang.Object) -> m
    java.lang.RuntimeException notFunctionError(java.lang.Object,java.lang.Object) -> g
    java.lang.RuntimeException notFunctionError(java.lang.Object,java.lang.Object,java.lang.String) -> a
    java.lang.RuntimeException notXmlError(java.lang.Object) -> n
    void warnAboutNonJSObject(java.lang.Object) -> o
    org.mozilla.javascript.RegExpProxy getRegExpProxy(org.mozilla.javascript.Context) -> d
    void setRegExpProxy(org.mozilla.javascript.Context,org.mozilla.javascript.RegExpProxy) -> a
    org.mozilla.javascript.RegExpProxy checkRegExpProxy(org.mozilla.javascript.Context) -> e
    org.mozilla.javascript.Scriptable wrapRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> c
    org.mozilla.javascript.xml.XMLLib currentXMLLib(org.mozilla.javascript.Context) -> h
    java.lang.String escapeAttributeValue(java.lang.Object,org.mozilla.javascript.Context) -> e
    java.lang.String escapeTextValue(java.lang.Object,org.mozilla.javascript.Context) -> f
    org.mozilla.javascript.Ref memberRef(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context,int) -> b
    org.mozilla.javascript.Ref memberRef(java.lang.Object,java.lang.Object,java.lang.Object,org.mozilla.javascript.Context,int) -> a
    org.mozilla.javascript.Ref nameRef(java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int) -> a
    org.mozilla.javascript.Ref nameRef(java.lang.Object,java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int) -> a
    void storeIndexResult(org.mozilla.javascript.Context,int) -> a
    int lastIndexResult(org.mozilla.javascript.Context) -> f
    void storeScriptable(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> b
    org.mozilla.javascript.Scriptable lastStoredScriptable(org.mozilla.javascript.Context) -> g
    java.lang.String makeUrlForGeneratedScript(boolean,java.lang.String,int) -> a
    java.lang.RuntimeException errorWithClassName(java.lang.String,java.lang.Object) -> b
org.mozilla.javascript.ScriptRuntime$1 -> a.a.b.dn:
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    int getLength() -> f
org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider -> a.a.b.do:
    java.lang.String getMessage(java.lang.String,java.lang.Object[]) -> a
org.mozilla.javascript.ScriptRuntime$IdEnumeration -> a.a.b.dp:
    org.mozilla.javascript.Scriptable obj -> a
    java.lang.Object[] ids -> b
    int index -> c
    org.mozilla.javascript.ObjToIntMap used -> d
    java.lang.Object currentId -> e
    int enumType -> f
    boolean enumNumbers -> g
    org.mozilla.javascript.Scriptable iterator -> h
org.mozilla.javascript.ScriptRuntime$MessageProvider -> a.a.b.dq:
    java.lang.String getMessage(java.lang.String,java.lang.Object[]) -> a
org.mozilla.javascript.ScriptRuntime$NoSuchMethodShim -> a.a.b.dr:
    java.lang.String methodName -> a
    org.mozilla.javascript.Callable noSuchMethodMethod -> b
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
org.mozilla.javascript.ScriptStackElement -> a.a.b.ds:
    java.lang.String fileName -> a
    java.lang.String functionName -> b
    int lineNumber -> c
    java.lang.String toString() -> toString
    void renderJavaStyle(java.lang.StringBuilder) -> a
    void renderMozillaStyle(java.lang.StringBuilder) -> b
org.mozilla.javascript.Scriptable -> a.a.b.dt:
    java.lang.Object NOT_FOUND -> j
    java.lang.String getClassName() -> a
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void delete(java.lang.String) -> e
    void delete(int) -> a
    org.mozilla.javascript.Scriptable getPrototype() -> l
    void setPrototype(org.mozilla.javascript.Scriptable) -> a_
    org.mozilla.javascript.Scriptable getParentScope() -> b_
    void setParentScope(org.mozilla.javascript.Scriptable) -> b_
    java.lang.Object[] getIds() -> c_
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
org.mozilla.javascript.ScriptableObject -> a.a.b.du:
    org.mozilla.javascript.Scriptable prototypeObject -> a
    org.mozilla.javascript.Scriptable parentScopeObject -> b
    org.mozilla.javascript.ScriptableObject$Slot[] slots -> c
    int count -> e
    org.mozilla.javascript.ScriptableObject$Slot firstAdded -> f
    org.mozilla.javascript.ScriptableObject$Slot lastAdded -> g
    java.util.Map associatedValues -> h
    boolean isExtensible -> i
    boolean $assertionsDisabled -> d
    org.mozilla.javascript.ScriptableObject buildDataDescriptor(org.mozilla.javascript.Scriptable,java.lang.Object,int) -> a
    void checkValidAttributes(int) -> h
    java.lang.String getTypeOf() -> c
    java.lang.String getClassName() -> a
    boolean has(java.lang.String,org.mozilla.javascript.Scriptable) -> c
    boolean has(int,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable) -> d
    java.lang.Object get(int,org.mozilla.javascript.Scriptable) -> b
    void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> b
    void put(int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void delete(java.lang.String) -> e
    void delete(int) -> a
    void putConst(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    void defineConst(java.lang.String,org.mozilla.javascript.Scriptable) -> a
    boolean isConst(java.lang.String) -> c
    int getAttributes(java.lang.String) -> f
    int getAttributes(int) -> g
    void setAttributes(java.lang.String,int) -> a
    void setGetterOrSetter(java.lang.String,int,org.mozilla.javascript.Callable,boolean) -> a
    void setGetterOrSetter(java.lang.String,int,org.mozilla.javascript.Callable,boolean,boolean) -> a
    java.lang.Object getGetterOrSetter(java.lang.String,int,boolean) -> a
    boolean isGetterOrSetter(java.lang.String,int,boolean) -> b
    void addLazilyInitializedValue(java.lang.String,int,org.mozilla.javascript.LazilyLoadedCtor,int) -> a
    org.mozilla.javascript.Scriptable getPrototype() -> l
    void setPrototype(org.mozilla.javascript.Scriptable) -> a_
    org.mozilla.javascript.Scriptable getParentScope() -> b_
    void setParentScope(org.mozilla.javascript.Scriptable) -> b_
    java.lang.Object[] getIds() -> c_
    java.lang.Object[] getAllIds() -> e
    java.lang.Object getDefaultValue(java.lang.Class) -> a
    java.lang.Object getDefaultValue(org.mozilla.javascript.Scriptable,java.lang.Class) -> a
    boolean hasInstance(org.mozilla.javascript.Scriptable) -> a
    boolean avoidObjectDetection() -> p
    java.lang.Object equivalentValues(java.lang.Object) -> c
    java.lang.String defineClass(org.mozilla.javascript.Scriptable,java.lang.Class,boolean,boolean) -> a
    org.mozilla.javascript.BaseFunction buildClassCtor(org.mozilla.javascript.Scriptable,java.lang.Class,boolean,boolean) -> b
    java.lang.reflect.Member findAnnotatedMember(java.lang.reflect.AccessibleObject[],java.lang.Class) -> a
    java.lang.reflect.Method findSetterMethod(java.lang.reflect.Method[],java.lang.String,java.lang.String) -> a
    java.lang.String getPropertyName(java.lang.String,java.lang.String,java.lang.annotation.Annotation) -> a
    java.lang.Class extendsScriptable(java.lang.Class) -> b
    void defineProperty(java.lang.String,java.lang.Object,int) -> a
    void defineProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,int) -> a
    void defineConstProperty(org.mozilla.javascript.Scriptable,java.lang.String) -> a
    void defineProperty(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,int) -> a
    void defineOwnProperties(org.mozilla.javascript.Context,org.mozilla.javascript.ScriptableObject) -> a
    void defineOwnProperty(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.ScriptableObject) -> a
    void defineOwnProperty(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.ScriptableObject,boolean) -> a
    void checkPropertyDefinition(org.mozilla.javascript.ScriptableObject) -> a
    void checkPropertyChange(java.lang.String,org.mozilla.javascript.ScriptableObject,org.mozilla.javascript.ScriptableObject) -> a
    boolean isTrue(java.lang.Object) -> d
    boolean isFalse(java.lang.Object) -> e
    boolean sameValue(java.lang.Object,java.lang.Object) -> a
    int applyDescriptorToAttributeBitset(int,org.mozilla.javascript.ScriptableObject) -> a
    boolean isDataDescriptor(org.mozilla.javascript.ScriptableObject) -> b
    boolean isAccessorDescriptor(org.mozilla.javascript.ScriptableObject) -> c
    org.mozilla.javascript.Scriptable ensureScriptable(java.lang.Object) -> f
    org.mozilla.javascript.ScriptableObject ensureScriptableObject(java.lang.Object) -> g
    org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable) -> d
    org.mozilla.javascript.Scriptable getFunctionPrototype(org.mozilla.javascript.Scriptable) -> e
    org.mozilla.javascript.Scriptable getArrayPrototype(org.mozilla.javascript.Scriptable) -> f
    org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String) -> b
    org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable) -> g
    boolean isExtensible() -> q
    void preventExtensions() -> r
    void sealObject() -> s
    boolean isSealed() -> t
    void checkNotSealed(java.lang.String,int) -> b
    java.lang.Object getProperty(org.mozilla.javascript.Scriptable,java.lang.String) -> c
    java.lang.Object getProperty(org.mozilla.javascript.Scriptable,int) -> a
    boolean hasProperty(org.mozilla.javascript.Scriptable,java.lang.String) -> d
    void redefineProperty(org.mozilla.javascript.Scriptable,java.lang.String,boolean) -> a
    boolean hasProperty(org.mozilla.javascript.Scriptable,int) -> b
    void putProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object) -> a
    void putConstProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object) -> b
    void putProperty(org.mozilla.javascript.Scriptable,int,java.lang.Object) -> a
    java.lang.Object[] getPropertyIds(org.mozilla.javascript.Scriptable) -> h
    java.lang.Object callMethod(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,java.lang.String) -> e
    org.mozilla.javascript.Scriptable getBase(org.mozilla.javascript.Scriptable,int) -> c
    java.lang.Object getAssociatedValue(java.lang.Object) -> h
    java.lang.Object getTopScopeValue(org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.Object associateValue(java.lang.Object,java.lang.Object) -> b
    boolean putImpl(java.lang.String,int,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    boolean putConstImpl(java.lang.String,int,org.mozilla.javascript.Scriptable,java.lang.Object,int) -> a
    org.mozilla.javascript.ScriptableObject$Slot findAttributeSlot(java.lang.String,int,int) -> a
    org.mozilla.javascript.ScriptableObject$Slot unwrapSlot(org.mozilla.javascript.ScriptableObject$Slot) -> b
    org.mozilla.javascript.ScriptableObject$Slot getSlot(java.lang.String,int,int) -> b
    org.mozilla.javascript.ScriptableObject$Slot createSlot(java.lang.String,int,int) -> c
    void removeSlot(java.lang.String,int) -> c
    int getSlotIndex(int,int) -> a
    void copyTable(org.mozilla.javascript.ScriptableObject$Slot[],org.mozilla.javascript.ScriptableObject$Slot[],int) -> a
    void addKnownAbsentSlot(org.mozilla.javascript.ScriptableObject$Slot[],org.mozilla.javascript.ScriptableObject$Slot,int) -> a
    java.lang.Object[] getIds(boolean) -> a
    org.mozilla.javascript.ScriptableObject getOwnPropertyDescriptor(org.mozilla.javascript.Context,java.lang.Object) -> a
    org.mozilla.javascript.ScriptableObject$Slot getSlot(org.mozilla.javascript.Context,java.lang.Object,int) -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    org.mozilla.javascript.ScriptableObject$Slot access$100(org.mozilla.javascript.ScriptableObject$Slot) -> a
org.mozilla.javascript.ScriptableObject$GetterSlot -> a.a.b.dv:
    java.lang.Object getter -> a
    java.lang.Object setter -> b
    org.mozilla.javascript.ScriptableObject getPropertyDescriptor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    boolean setValue(java.lang.Object,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object getValue(org.mozilla.javascript.Scriptable) -> a
    void markDeleted() -> a
org.mozilla.javascript.ScriptableObject$RelinkedSlot -> a.a.b.dw:
    org.mozilla.javascript.ScriptableObject$Slot slot -> a
    boolean setValue(java.lang.Object,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object getValue(org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.ScriptableObject getPropertyDescriptor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    int getAttributes() -> b
    void setAttributes(int) -> a
    void markDeleted() -> a
org.mozilla.javascript.ScriptableObject$Slot -> a.a.b.dx:
    java.lang.String name -> c
    int indexOrHash -> d
    short attributes -> a
    boolean wasDeleted -> e
    java.lang.Object value -> f
    org.mozilla.javascript.ScriptableObject$Slot next -> g
    org.mozilla.javascript.ScriptableObject$Slot orderedNext -> h
    boolean setValue(java.lang.Object,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable) -> a
    java.lang.Object getValue(org.mozilla.javascript.Scriptable) -> a
    int getAttributes() -> b
    void setAttributes(int) -> a
    void markDeleted() -> a
    org.mozilla.javascript.ScriptableObject getPropertyDescriptor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> a
    short access$000(org.mozilla.javascript.ScriptableObject$Slot) -> a
org.mozilla.javascript.SecurityController -> a.a.b.dy:
    org.mozilla.javascript.SecurityController global -> a
    org.mozilla.javascript.SecurityController global() -> c
    org.mozilla.javascript.GeneratedClassLoader createClassLoader(java.lang.ClassLoader,java.lang.Object) -> a
    org.mozilla.javascript.GeneratedClassLoader createLoader(java.lang.ClassLoader,java.lang.Object) -> b
    java.lang.Class getStaticSecurityDomainClass() -> d
    java.lang.Class getStaticSecurityDomainClassInternal() -> a
    java.lang.Object getDynamicSecurityDomain(java.lang.Object) -> a
    java.lang.Object callWithDomain(java.lang.Object,org.mozilla.javascript.Context,org.mozilla.javascript.Callable,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    java.lang.Object execWithDomain(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Script,java.lang.Object) -> a
org.mozilla.javascript.SecurityController$1 -> a.a.b.dz:
    org.mozilla.javascript.Callable val$callable -> a
    org.mozilla.javascript.Scriptable val$thisObj -> b
    java.lang.Object[] val$args -> c
    org.mozilla.javascript.SecurityController this$0 -> d
    java.lang.Object exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable) -> b
org.mozilla.javascript.SecurityUtilities -> a.a.b.ea:
    java.lang.String getSystemProperty(java.lang.String) -> a
    java.security.ProtectionDomain getProtectionDomain(java.lang.Class) -> a
    java.security.ProtectionDomain getScriptProtectionDomain() -> a
org.mozilla.javascript.SecurityUtilities$1 -> a.a.b.eb:
    java.lang.String val$name -> a
    java.lang.String run() -> a
    java.lang.Object run() -> run
org.mozilla.javascript.SecurityUtilities$2 -> a.a.b.ec:
    java.lang.Class val$clazz -> a
    java.security.ProtectionDomain run() -> a
    java.lang.Object run() -> run
org.mozilla.javascript.SecurityUtilities$3 -> a.a.b.ed:
    java.lang.SecurityManager val$securityManager -> a
    java.security.ProtectionDomain run() -> a
    java.lang.Object run() -> run
org.mozilla.javascript.SpecialRef -> a.a.b.ee:
    org.mozilla.javascript.Scriptable target -> a
    int type -> b
    java.lang.String name -> c
    org.mozilla.javascript.Ref createSpecial(org.mozilla.javascript.Context,java.lang.Object,java.lang.String) -> a
    java.lang.Object get(org.mozilla.javascript.Context) -> a
    java.lang.Object set(org.mozilla.javascript.Context,java.lang.Object) -> a
    boolean delete(org.mozilla.javascript.Context) -> b
org.mozilla.javascript.Token -> a.a.b.ef:
    java.lang.String name(int) -> a
    java.lang.String typeToName(int) -> b
    java.lang.String keywordToName(int) -> c
    boolean isValidToken(int) -> d
org.mozilla.javascript.Token$CommentType -> a.a.b.eg:
    org.mozilla.javascript.Token$CommentType LINE -> a
    org.mozilla.javascript.Token$CommentType BLOCK_COMMENT -> b
    org.mozilla.javascript.Token$CommentType JSDOC -> c
    org.mozilla.javascript.Token$CommentType HTML -> d
    org.mozilla.javascript.Token$CommentType[] $VALUES -> e
    org.mozilla.javascript.Token$CommentType[] values() -> values
    org.mozilla.javascript.Token$CommentType valueOf(java.lang.String) -> valueOf
org.mozilla.javascript.TokenStream -> a.a.b.eh:
    boolean dirtyLine -> h
    java.lang.String regExpFlags -> a
    java.lang.String string -> i
    double number -> j
    boolean isOctal -> k
    int quoteChar -> l
    char[] stringBuffer -> m
    int stringBufferTop -> n
    org.mozilla.javascript.ObjToIntMap allStrings -> o
    int[] ungetBuffer -> p
    int ungetCursor -> q
    boolean hitEOF -> r
    int lineStart -> s
    int lineEndChar -> t
    int lineno -> b
    java.lang.String sourceString -> u
    java.io.Reader sourceReader -> v
    char[] sourceBuffer -> w
    int sourceEnd -> x
    int sourceCursor -> c
    int cursor -> d
    int tokenBeg -> e
    int tokenEnd -> f
    org.mozilla.javascript.Token$CommentType commentType -> g
    boolean xmlIsAttribute -> y
    boolean xmlIsTagContent -> z
    int xmlOpenTagsCount -> A
    org.mozilla.javascript.Parser parser -> B
    java.lang.String commentPrefix -> C
    int commentCursor -> D
    boolean isKeyword(java.lang.String) -> a
    int stringToKeyword(java.lang.String) -> b
    int getLineno() -> a
    java.lang.String getString() -> b
    char getQuoteChar() -> c
    double getNumber() -> d
    boolean isNumberOctal() -> e
    int getToken() -> f
    boolean isAlpha(int) -> d
    boolean isDigit(int) -> a
    boolean isJSSpace(int) -> b
    boolean isJSFormatChar(int) -> e
    void readRegExp(int) -> c
    java.lang.String readAndClearRegExpFlags() -> g
    boolean isXMLAttribute() -> h
    int getFirstXMLToken() -> i
    int getNextXMLToken() -> j
    boolean readQuotedString(int) -> f
    boolean readXmlComment() -> o
    boolean readCDATA() -> p
    boolean readEntity() -> q
    boolean readPI() -> r
    java.lang.String getStringFromBuffer() -> s
    void addToString(int) -> g
    boolean canUngetChar() -> t
    void ungetChar(int) -> h
    boolean matchChar(int) -> i
    int peekChar() -> u
    int getChar() -> v
    int getChar(boolean) -> a
    int getCharIgnoreLineEnd() -> w
    void ungetCharIgnoreLineEnd(int) -> j
    void skipLine() -> x
    int getOffset() -> k
    java.lang.String getLine() -> l
    boolean fillSourceBuffer() -> y
    int getTokenLength() -> m
    void markCommentStart() -> z
    void markCommentStart(java.lang.String) -> c
    boolean isMarkingComment() -> A
    java.lang.String getAndResetCurrentComment() -> n
    java.lang.String convertLastCharToHex(java.lang.String) -> d
org.mozilla.javascript.TopLevel -> a.a.b.ei:
    java.util.EnumMap ctors -> b
    boolean $assertionsDisabled -> a
    java.lang.String getClassName() -> a
    void cacheBuiltins() -> g
    org.mozilla.javascript.Scriptable getBuiltinPrototype(org.mozilla.javascript.Scriptable,org.mozilla.javascript.TopLevel$Builtins) -> a
    org.mozilla.javascript.BaseFunction getBuiltinCtor(org.mozilla.javascript.TopLevel$Builtins) -> a
    org.mozilla.javascript.Scriptable getBuiltinPrototype(org.mozilla.javascript.TopLevel$Builtins) -> b
org.mozilla.javascript.TopLevel$Builtins -> a.a.b.ej:
    org.mozilla.javascript.TopLevel$Builtins Object -> a
    org.mozilla.javascript.TopLevel$Builtins Array -> b
    org.mozilla.javascript.TopLevel$Builtins Function -> c
    org.mozilla.javascript.TopLevel$Builtins String -> d
    org.mozilla.javascript.TopLevel$Builtins Number -> e
    org.mozilla.javascript.TopLevel$Builtins Boolean -> f
    org.mozilla.javascript.TopLevel$Builtins RegExp -> g
    org.mozilla.javascript.TopLevel$Builtins Error -> h
    org.mozilla.javascript.TopLevel$Builtins[] $VALUES -> i
    org.mozilla.javascript.TopLevel$Builtins[] values() -> values
    org.mozilla.javascript.TopLevel$Builtins valueOf(java.lang.String) -> valueOf
org.mozilla.javascript.UintMap -> a.a.b.ek:
    int[] keys -> a
    java.lang.Object[] values -> b
    int power -> c
    int keyCount -> d
    int occupiedCount -> e
    int ivaluesShift -> f
    java.lang.Object getObject(int) -> a
    int getInt(int,int) -> a
    int getExistingInt(int) -> b
    void put(int,java.lang.Object) -> a
    void put(int,int) -> b
    int[] getKeys() -> a
    int tableLookupStep(int,int,int) -> a
    int findIndex(int) -> c
    int insertNewKey(int) -> d
    void rehashTable(boolean) -> a
    int ensureIndex(int,boolean) -> a
org.mozilla.javascript.Undefined -> a.a.b.el:
    java.lang.Object instance -> a
org.mozilla.javascript.UniqueTag -> a.a.b.em:
    org.mozilla.javascript.UniqueTag NOT_FOUND -> a
    org.mozilla.javascript.UniqueTag NULL_VALUE -> b
    org.mozilla.javascript.UniqueTag DOUBLE_MARK -> c
    int tagId -> d
    java.lang.String toString() -> toString
org.mozilla.javascript.VMBridge -> a.a.b.en:
    org.mozilla.javascript.VMBridge instance -> a
    org.mozilla.javascript.VMBridge makeInstance() -> c
    java.lang.Object getThreadContextHelper() -> a
    org.mozilla.javascript.Context getContext(java.lang.Object) -> a
    void setContext(java.lang.Object,org.mozilla.javascript.Context) -> a
    java.lang.ClassLoader getCurrentThreadClassLoader() -> b
    boolean tryToMakeAccessible(java.lang.Object) -> b
    java.lang.Object getInterfaceProxyHelper(org.mozilla.javascript.ContextFactory,java.lang.Class[]) -> a
    java.lang.Object newInterfaceProxy(java.lang.Object,org.mozilla.javascript.ContextFactory,org.mozilla.javascript.InterfaceAdapter,java.lang.Object,org.mozilla.javascript.Scriptable) -> a
    boolean isVarArgs(java.lang.reflect.Member) -> a
    java.util.Iterator getJavaIterator(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
org.mozilla.javascript.WrapFactory -> a.a.b.eo:
    boolean javaPrimitiveWrap -> a
    java.lang.Object wrap(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class) -> a
    org.mozilla.javascript.Scriptable wrapNewObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    org.mozilla.javascript.Scriptable wrapAsJavaObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class) -> b
    org.mozilla.javascript.Scriptable wrapJavaClass(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Class) -> a
    boolean isJavaPrimitiveWrap() -> a
org.mozilla.javascript.WrappedException -> a.a.b.ep:
    java.lang.Throwable exception -> c
    java.lang.Throwable getWrappedException() -> b
org.mozilla.javascript.Wrapper -> a.a.b.eq:
    java.lang.Object unwrap() -> b
org.mozilla.javascript.annotations.JSConstructor -> a.a.b.a.a:
org.mozilla.javascript.annotations.JSFunction -> a.a.b.a.b:
    java.lang.String value() -> a
org.mozilla.javascript.annotations.JSGetter -> a.a.b.a.c:
    java.lang.String value() -> a
org.mozilla.javascript.annotations.JSSetter -> a.a.b.a.d:
    java.lang.String value() -> a
org.mozilla.javascript.annotations.JSStaticFunction -> a.a.b.a.e:
    java.lang.String value() -> a
org.mozilla.javascript.ast.ArrayComprehension -> a.a.b.b.a:
    org.mozilla.javascript.ast.AstNode result -> j
    java.util.List loops -> k
    org.mozilla.javascript.ast.AstNode filter -> l
    int ifPosition -> m
    int lp -> n
    int rp -> p
    org.mozilla.javascript.ast.AstNode getResult() -> r
    void setResult(org.mozilla.javascript.ast.AstNode) -> a
    java.util.List getLoops() -> s
    void setLoops(java.util.List) -> a
    void addLoop(org.mozilla.javascript.ast.ArrayComprehensionLoop) -> a
    org.mozilla.javascript.ast.AstNode getFilter() -> t
    void setFilter(org.mozilla.javascript.ast.AstNode) -> b
    void setIfPosition(int) -> g
    void setFilterLp(int) -> h
    void setFilterRp(int) -> i
org.mozilla.javascript.ast.ArrayComprehensionLoop -> a.a.b.b.b:
    org.mozilla.javascript.ast.AstNode getBody() -> r
    void setBody(org.mozilla.javascript.ast.AstNode) -> a
org.mozilla.javascript.ast.ArrayLiteral -> a.a.b.b.c:
    java.util.List NO_ELEMS -> j
    java.util.List elements -> k
    int destructuringLength -> l
    int skipCount -> m
    boolean isDestructuring -> n
    java.util.List getElements() -> r
    void addElement(org.mozilla.javascript.ast.AstNode) -> a
    int getDestructuringLength() -> s
    void setDestructuringLength(int) -> g
    void setSkipCount(int) -> h
    void setIsDestructuring(boolean) -> a
    boolean isDestructuring() -> t
org.mozilla.javascript.ast.Assignment -> a.a.b.b.d:
org.mozilla.javascript.ast.AstNode -> a.a.b.b.e:
    int position -> g
    int length -> h
    org.mozilla.javascript.ast.AstNode parent -> i
    java.util.Map operatorNames -> j
    int getPosition() -> u
    void setPosition(int) -> j
    int getAbsolutePosition() -> v
    int getLength() -> w
    void setLength(int) -> k
    void setBounds(int,int) -> c
    void setRelative(int) -> l
    org.mozilla.javascript.ast.AstNode getParent() -> x
    void setParent(org.mozilla.javascript.ast.AstNode) -> c
    void addChild(org.mozilla.javascript.ast.AstNode) -> d
    boolean hasSideEffects() -> o
    void assertNotNull(java.lang.Object) -> a
    java.lang.RuntimeException codeBug() -> y
    int compareTo(org.mozilla.javascript.ast.AstNode) -> e
    int getLineno() -> h
    int compareTo(java.lang.Object) -> compareTo
org.mozilla.javascript.ast.AstNode$PositionComparator -> a.a.b.b.f:
    int compare(org.mozilla.javascript.ast.AstNode,org.mozilla.javascript.ast.AstNode) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.mozilla.javascript.ast.AstRoot -> a.a.b.b.g:
    java.util.SortedSet comments -> j
    boolean inStrictMode -> k
    void addComment(org.mozilla.javascript.ast.Comment) -> b
    void setInStrictMode(boolean) -> a
    boolean isInStrictMode() -> r
org.mozilla.javascript.ast.Block -> a.a.b.b.h:
    void addStatement(org.mozilla.javascript.ast.AstNode) -> a
org.mozilla.javascript.ast.BreakStatement -> a.a.b.b.i:
    org.mozilla.javascript.ast.Name breakLabel -> j
    org.mozilla.javascript.ast.AstNode target -> k
    org.mozilla.javascript.ast.Name getBreakLabel() -> r
    void setBreakLabel(org.mozilla.javascript.ast.Name) -> a
    void setBreakTarget(org.mozilla.javascript.ast.Jump) -> a
org.mozilla.javascript.ast.CatchClause -> a.a.b.b.j:
    org.mozilla.javascript.ast.Name varName -> j
    org.mozilla.javascript.ast.AstNode catchCondition -> k
    org.mozilla.javascript.ast.Block body -> l
    int ifPosition -> m
    int lp -> n
    int rp -> o
    org.mozilla.javascript.ast.Name getVarName() -> r
    void setVarName(org.mozilla.javascript.ast.Name) -> a
    org.mozilla.javascript.ast.AstNode getCatchCondition() -> s
    void setCatchCondition(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.Block getBody() -> t
    void setBody(org.mozilla.javascript.ast.Block) -> a
    void setParens(int,int) -> d
    void setIfPosition(int) -> g
org.mozilla.javascript.ast.Comment -> a.a.b.b.k:
    java.lang.String value -> j
    org.mozilla.javascript.Token$CommentType commentType -> k
org.mozilla.javascript.ast.ConditionalExpression -> a.a.b.b.l:
    org.mozilla.javascript.ast.AstNode testExpression -> j
    org.mozilla.javascript.ast.AstNode trueExpression -> k
    org.mozilla.javascript.ast.AstNode falseExpression -> l
    int questionMarkPosition -> m
    int colonPosition -> n
    org.mozilla.javascript.ast.AstNode getTestExpression() -> r
    void setTestExpression(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getTrueExpression() -> s
    void setTrueExpression(org.mozilla.javascript.ast.AstNode) -> b
    org.mozilla.javascript.ast.AstNode getFalseExpression() -> t
    void setFalseExpression(org.mozilla.javascript.ast.AstNode) -> f
    void setQuestionMarkPosition(int) -> g
    void setColonPosition(int) -> h
    boolean hasSideEffects() -> o
org.mozilla.javascript.ast.ContinueStatement -> a.a.b.b.m:
    org.mozilla.javascript.ast.Name label -> j
    org.mozilla.javascript.ast.Loop target -> k
    void setTarget(org.mozilla.javascript.ast.Loop) -> a
    org.mozilla.javascript.ast.Name getLabel() -> r
    void setLabel(org.mozilla.javascript.ast.Name) -> a
org.mozilla.javascript.ast.DestructuringForm -> a.a.b.b.n:
    void setIsDestructuring(boolean) -> a
    boolean isDestructuring() -> t
org.mozilla.javascript.ast.DoLoop -> a.a.b.b.o:
    org.mozilla.javascript.ast.AstNode condition -> j
    int whilePosition -> k
    org.mozilla.javascript.ast.AstNode getCondition() -> s
    void setCondition(org.mozilla.javascript.ast.AstNode) -> b
    void setWhilePosition(int) -> g
org.mozilla.javascript.ast.ElementGet -> a.a.b.b.p:
    org.mozilla.javascript.ast.AstNode target -> j
    org.mozilla.javascript.ast.AstNode element -> k
    int lb -> l
    int rb -> m
    org.mozilla.javascript.ast.AstNode getTarget() -> r
    void setTarget(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getElement() -> s
    void setElement(org.mozilla.javascript.ast.AstNode) -> b
    void setParens(int,int) -> d
org.mozilla.javascript.ast.EmptyExpression -> a.a.b.b.q:
org.mozilla.javascript.ast.EmptyStatement -> a.a.b.b.r:
org.mozilla.javascript.ast.ErrorNode -> a.a.b.b.s:
org.mozilla.javascript.ast.ExpressionStatement -> a.a.b.b.t:
    org.mozilla.javascript.ast.AstNode expr -> j
    void setHasResult() -> r
    org.mozilla.javascript.ast.AstNode getExpression() -> s
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
    boolean hasSideEffects() -> o
org.mozilla.javascript.ast.ForInLoop -> a.a.b.b.u:
    org.mozilla.javascript.ast.AstNode iterator -> j
    org.mozilla.javascript.ast.AstNode iteratedObject -> k
    int inPosition -> l
    int eachPosition -> m
    boolean isForEach -> n
    org.mozilla.javascript.ast.AstNode getIterator() -> s
    void setIterator(org.mozilla.javascript.ast.AstNode) -> b
    org.mozilla.javascript.ast.AstNode getIteratedObject() -> t
    void setIteratedObject(org.mozilla.javascript.ast.AstNode) -> f
    boolean isForEach() -> z
    void setIsForEach(boolean) -> a
    void setInPosition(int) -> g
    void setEachPosition(int) -> h
org.mozilla.javascript.ast.ForLoop -> a.a.b.b.v:
    org.mozilla.javascript.ast.AstNode initializer -> j
    org.mozilla.javascript.ast.AstNode condition -> k
    org.mozilla.javascript.ast.AstNode increment -> l
    org.mozilla.javascript.ast.AstNode getInitializer() -> s
    void setInitializer(org.mozilla.javascript.ast.AstNode) -> b
    org.mozilla.javascript.ast.AstNode getCondition() -> t
    void setCondition(org.mozilla.javascript.ast.AstNode) -> f
    org.mozilla.javascript.ast.AstNode getIncrement() -> z
    void setIncrement(org.mozilla.javascript.ast.AstNode) -> g
org.mozilla.javascript.ast.FunctionCall -> a.a.b.b.w:
    java.util.List NO_ARGS -> j
    org.mozilla.javascript.ast.AstNode target -> k
    java.util.List arguments -> l
    int lp -> m
    int rp -> n
    org.mozilla.javascript.ast.AstNode getTarget() -> r
    void setTarget(org.mozilla.javascript.ast.AstNode) -> a
    java.util.List getArguments() -> s
    void setArguments(java.util.List) -> a
    void addArgument(org.mozilla.javascript.ast.AstNode) -> b
    void setLp(int) -> g
    void setRp(int) -> h
    void setParens(int,int) -> d
org.mozilla.javascript.ast.FunctionNode -> a.a.b.b.x:
    java.util.List NO_PARAMS -> j
    org.mozilla.javascript.ast.Name functionName -> k
    java.util.List params -> l
    org.mozilla.javascript.ast.AstNode body -> m
    boolean isExpressionClosure -> n
    org.mozilla.javascript.ast.FunctionNode$Form functionForm -> p
    int lp -> q
    int rp -> r
    int functionType -> v
    boolean needsActivation -> w
    boolean isGenerator -> x
    java.util.List generatorResumePoints -> y
    java.util.Map liveLocals -> z
    org.mozilla.javascript.ast.AstNode memberExprNode -> A
    org.mozilla.javascript.ast.Name getFunctionName() -> r
    void setFunctionName(org.mozilla.javascript.ast.Name) -> a
    java.lang.String getName() -> s
    java.util.List getParams() -> t
    void addParam(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getBody() -> z
    void setBody(org.mozilla.javascript.ast.AstNode) -> b
    void setLp(int) -> g
    void setRp(int) -> h
    boolean isExpressionClosure() -> A
    void setIsExpressionClosure(boolean) -> a
    boolean requiresActivation() -> B
    void setRequiresActivation() -> C
    boolean isGenerator() -> D
    void setIsGenerator() -> E
    void addResumptionPoint(org.mozilla.javascript.Node) -> g
    java.util.List getResumptionPoints() -> F
    java.util.Map getLiveLocals() -> G
    void addLiveLocals(org.mozilla.javascript.Node,int[]) -> a
    int addFunction(org.mozilla.javascript.ast.FunctionNode) -> a
    int getFunctionType() -> H
    void setFunctionType(int) -> i
    void setMemberExprNode(org.mozilla.javascript.ast.AstNode) -> f
    org.mozilla.javascript.ast.AstNode getMemberExprNode() -> I
org.mozilla.javascript.ast.FunctionNode$Form -> a.a.b.b.y:
    org.mozilla.javascript.ast.FunctionNode$Form FUNCTION -> a
    org.mozilla.javascript.ast.FunctionNode$Form GETTER -> b
    org.mozilla.javascript.ast.FunctionNode$Form SETTER -> c
    org.mozilla.javascript.ast.FunctionNode$Form[] $VALUES -> d
    org.mozilla.javascript.ast.FunctionNode$Form[] values() -> values
    org.mozilla.javascript.ast.FunctionNode$Form valueOf(java.lang.String) -> valueOf
org.mozilla.javascript.ast.GeneratorExpression -> a.a.b.b.z:
    org.mozilla.javascript.ast.AstNode result -> j
    java.util.List loops -> k
    org.mozilla.javascript.ast.AstNode filter -> l
    int ifPosition -> m
    int lp -> n
    int rp -> p
    org.mozilla.javascript.ast.AstNode getResult() -> r
    void setResult(org.mozilla.javascript.ast.AstNode) -> a
    java.util.List getLoops() -> s
    void setLoops(java.util.List) -> a
    void addLoop(org.mozilla.javascript.ast.GeneratorExpressionLoop) -> a
    org.mozilla.javascript.ast.AstNode getFilter() -> t
    void setFilter(org.mozilla.javascript.ast.AstNode) -> b
    void setIfPosition(int) -> g
    void setFilterLp(int) -> h
    void setFilterRp(int) -> i
org.mozilla.javascript.ast.GeneratorExpressionLoop -> a.a.b.b.aa:
    boolean isForEach() -> z
    void setIsForEach(boolean) -> a
org.mozilla.javascript.ast.IdeErrorReporter -> a.a.b.b.ab:
    void warning(java.lang.String,java.lang.String,int,int) -> a
    void error(java.lang.String,java.lang.String,int,int) -> b
org.mozilla.javascript.ast.IfStatement -> a.a.b.b.ac:
    org.mozilla.javascript.ast.AstNode condition -> j
    org.mozilla.javascript.ast.AstNode thenPart -> k
    int elsePosition -> l
    org.mozilla.javascript.ast.AstNode elsePart -> m
    int lp -> n
    int rp -> o
    org.mozilla.javascript.ast.AstNode getCondition() -> r
    void setCondition(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getThenPart() -> s
    void setThenPart(org.mozilla.javascript.ast.AstNode) -> b
    org.mozilla.javascript.ast.AstNode getElsePart() -> t
    void setElsePart(org.mozilla.javascript.ast.AstNode) -> f
    void setElsePosition(int) -> g
    void setParens(int,int) -> d
org.mozilla.javascript.ast.InfixExpression -> a.a.b.b.ad:
    org.mozilla.javascript.ast.AstNode left -> j
    org.mozilla.javascript.ast.AstNode right -> k
    int operatorPosition -> l
    void setLeftAndRight(org.mozilla.javascript.ast.AstNode,org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getLeft() -> r
    void setLeft(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getRight() -> s
    void setRight(org.mozilla.javascript.ast.AstNode) -> b
    void setOperatorPosition(int) -> g
    boolean hasSideEffects() -> o
org.mozilla.javascript.ast.Jump -> a.a.b.b.ae:
    org.mozilla.javascript.Node target -> o
    org.mozilla.javascript.Node target2 -> j
    org.mozilla.javascript.ast.Jump jumpNode -> k
    org.mozilla.javascript.ast.Jump getJumpStatement() -> J
    void setJumpStatement(org.mozilla.javascript.ast.Jump) -> b
    org.mozilla.javascript.Node getDefault() -> K
    void setDefault(org.mozilla.javascript.Node) -> h
    org.mozilla.javascript.Node getFinally() -> L
    void setFinally(org.mozilla.javascript.Node) -> i
    void setLoop(org.mozilla.javascript.ast.Jump) -> c
    org.mozilla.javascript.Node getContinue() -> M
    void setContinue(org.mozilla.javascript.Node) -> j
org.mozilla.javascript.ast.KeywordLiteral -> a.a.b.b.af:
    org.mozilla.javascript.ast.KeywordLiteral setType(int) -> g
    org.mozilla.javascript.Node setType(int) -> a
org.mozilla.javascript.ast.Label -> a.a.b.b.ag:
    java.lang.String name -> j
    java.lang.String getName() -> r
    void setName(java.lang.String) -> c
org.mozilla.javascript.ast.LabeledStatement -> a.a.b.b.ah:
    java.util.List labels -> j
    org.mozilla.javascript.ast.AstNode statement -> k
    java.util.List getLabels() -> r
    void addLabel(org.mozilla.javascript.ast.Label) -> a
    org.mozilla.javascript.ast.AstNode getStatement() -> s
    org.mozilla.javascript.ast.Label getLabelByName(java.lang.String) -> c
    void setStatement(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.Label getFirstLabel() -> t
org.mozilla.javascript.ast.LetNode -> a.a.b.b.ai:
    org.mozilla.javascript.ast.VariableDeclaration variables -> j
    org.mozilla.javascript.ast.AstNode body -> k
    int lp -> l
    int rp -> m
    org.mozilla.javascript.ast.VariableDeclaration getVariables() -> r
    void setVariables(org.mozilla.javascript.ast.VariableDeclaration) -> a
    org.mozilla.javascript.ast.AstNode getBody() -> s
    void setBody(org.mozilla.javascript.ast.AstNode) -> a
    void setLp(int) -> g
    void setRp(int) -> h
org.mozilla.javascript.ast.Loop -> a.a.b.b.aj:
    org.mozilla.javascript.ast.AstNode body -> p
    int lp -> q
    int rp -> r
    org.mozilla.javascript.ast.AstNode getBody() -> r
    void setBody(org.mozilla.javascript.ast.AstNode) -> a
    void setParens(int,int) -> d
org.mozilla.javascript.ast.Name -> a.a.b.b.ak:
    java.lang.String identifier -> j
    org.mozilla.javascript.ast.Scope scope -> k
    java.lang.String getIdentifier() -> r
    void setIdentifier(java.lang.String) -> c
    void setScope(org.mozilla.javascript.ast.Scope) -> a
    org.mozilla.javascript.ast.Scope getScope() -> k
    int length() -> s
org.mozilla.javascript.ast.NewExpression -> a.a.b.b.al:
    org.mozilla.javascript.ast.ObjectLiteral initializer -> o
    org.mozilla.javascript.ast.ObjectLiteral getInitializer() -> t
    void setInitializer(org.mozilla.javascript.ast.ObjectLiteral) -> a
org.mozilla.javascript.ast.NumberLiteral -> a.a.b.b.am:
    java.lang.String value -> j
    double number -> k
    void setValue(java.lang.String) -> c
    double getNumber() -> r
    void setNumber(double) -> c
org.mozilla.javascript.ast.ObjectLiteral -> a.a.b.b.an:
    java.util.List NO_ELEMS -> k
    java.util.List elements -> l
    boolean isDestructuring -> j
    java.util.List getElements() -> r
    void setElements(java.util.List) -> a
    void addElement(org.mozilla.javascript.ast.ObjectProperty) -> a
    void setIsDestructuring(boolean) -> a
    boolean isDestructuring() -> t
org.mozilla.javascript.ast.ObjectProperty -> a.a.b.b.ao:
    void setIsGetter() -> t
    boolean isGetter() -> z
    void setIsSetter() -> A
    boolean isSetter() -> B
org.mozilla.javascript.ast.ParenthesizedExpression -> a.a.b.b.ap:
    org.mozilla.javascript.ast.AstNode expression -> j
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
org.mozilla.javascript.ast.PropertyGet -> a.a.b.b.aq:
    org.mozilla.javascript.ast.AstNode getTarget() -> t
    org.mozilla.javascript.ast.Name getProperty() -> z
org.mozilla.javascript.ast.RegExpLiteral -> a.a.b.b.ar:
    java.lang.String value -> j
    java.lang.String flags -> k
    java.lang.String getValue() -> r
    void setValue(java.lang.String) -> c
    java.lang.String getFlags() -> s
    void setFlags(java.lang.String) -> d
org.mozilla.javascript.ast.ReturnStatement -> a.a.b.b.as:
    org.mozilla.javascript.ast.AstNode returnValue -> j
    org.mozilla.javascript.ast.AstNode getReturnValue() -> r
    void setReturnValue(org.mozilla.javascript.ast.AstNode) -> a
org.mozilla.javascript.ast.Scope -> a.a.b.b.at:
    java.util.Map symbolTable -> s
    org.mozilla.javascript.ast.Scope parentScope -> t
    org.mozilla.javascript.ast.ScriptNode top -> u
    java.util.List childScopes -> j
    org.mozilla.javascript.ast.Scope getParentScope() -> N
    void setParentScope(org.mozilla.javascript.ast.Scope) -> b
    void addChildScope(org.mozilla.javascript.ast.Scope) -> c
    void replaceWith(org.mozilla.javascript.ast.Scope) -> d
    org.mozilla.javascript.ast.Scope splitScope(org.mozilla.javascript.ast.Scope) -> e
    void joinScopes(org.mozilla.javascript.ast.Scope,org.mozilla.javascript.ast.Scope) -> a
    org.mozilla.javascript.ast.Scope getDefiningScope(java.lang.String) -> c
    org.mozilla.javascript.ast.Symbol getSymbol(java.lang.String) -> d
    void putSymbol(org.mozilla.javascript.ast.Symbol) -> a
    java.util.Map getSymbolTable() -> O
    void setSymbolTable(java.util.Map) -> a
    java.util.Map ensureSymbolTable() -> r
org.mozilla.javascript.ast.ScriptNode -> a.a.b.b.au:
    int encodedSourceStart -> j
    int encodedSourceEnd -> k
    java.lang.String sourceName -> l
    java.lang.String encodedSource -> m
    int endLineno -> n
    java.util.List functions -> p
    java.util.List regexps -> q
    java.util.List EMPTY_LIST -> r
    java.util.List symbols -> v
    int paramCount -> w
    java.lang.String[] variableNames -> x
    boolean[] isConsts -> y
    java.lang.Object compilerData -> z
    int tempNumber -> A
    java.lang.String getSourceName() -> P
    void setSourceName(java.lang.String) -> e
    int getEncodedSourceStart() -> Q
    int getEncodedSourceEnd() -> R
    void setEncodedSourceBounds(int,int) -> d
    void setEncodedSource(java.lang.String) -> f
    java.lang.String getEncodedSource() -> S
    int getBaseLineno() -> T
    void setBaseLineno(int) -> m
    int getEndLineno() -> U
    void setEndLineno(int) -> n
    int getFunctionCount() -> V
    org.mozilla.javascript.ast.FunctionNode getFunctionNode(int) -> o
    int addFunction(org.mozilla.javascript.ast.FunctionNode) -> a
    int getRegexpCount() -> W
    java.lang.String getRegexpString(int) -> p
    java.lang.String getRegexpFlags(int) -> q
    void addRegExp(org.mozilla.javascript.ast.RegExpLiteral) -> a
    int getIndexForNameNode(org.mozilla.javascript.Node) -> k
    java.lang.String getParamOrVarName(int) -> r
    int getParamCount() -> X
    int getParamAndVarCount() -> Y
    java.lang.String[] getParamAndVarNames() -> Z
    boolean[] getParamAndVarConst() -> aa
    void addSymbol(org.mozilla.javascript.ast.Symbol) -> b
    void flattenSymbolTable(boolean) -> b
    java.lang.Object getCompilerData() -> ab
    void setCompilerData(java.lang.Object) -> b
    java.lang.String getNextTempName() -> ac
org.mozilla.javascript.ast.StringLiteral -> a.a.b.b.av:
    java.lang.String value -> j
    char quoteChar -> k
    java.lang.String getValue() -> r
    void setValue(java.lang.String) -> c
    void setQuoteCharacter(char) -> a
org.mozilla.javascript.ast.SwitchCase -> a.a.b.b.aw:
    org.mozilla.javascript.ast.AstNode expression -> j
    java.util.List statements -> k
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
    java.util.List getStatements() -> s
    void addStatement(org.mozilla.javascript.ast.AstNode) -> b
org.mozilla.javascript.ast.SwitchStatement -> a.a.b.b.ax:
    java.util.List NO_CASES -> j
    org.mozilla.javascript.ast.AstNode expression -> k
    java.util.List cases -> l
    int lp -> m
    int rp -> n
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
    java.util.List getCases() -> s
    void addCase(org.mozilla.javascript.ast.SwitchCase) -> a
    void setLp(int) -> g
    void setRp(int) -> h
org.mozilla.javascript.ast.Symbol -> a.a.b.b.ay:
    int declType -> a
    int index -> b
    java.lang.String name -> c
    org.mozilla.javascript.Node node -> d
    org.mozilla.javascript.ast.Scope containingTable -> e
    int getDeclType() -> a
    void setDeclType(int) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    int getIndex() -> c
    void setIndex(int) -> b
    org.mozilla.javascript.ast.Scope getContainingTable() -> d
    void setContainingTable(org.mozilla.javascript.ast.Scope) -> a
    java.lang.String getDeclTypeName() -> e
    java.lang.String toString() -> toString
org.mozilla.javascript.ast.ThrowStatement -> a.a.b.b.az:
    org.mozilla.javascript.ast.AstNode expression -> j
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
org.mozilla.javascript.ast.TryStatement -> a.a.b.b.ba:
    java.util.List NO_CATCHES -> j
    org.mozilla.javascript.ast.AstNode tryBlock -> k
    java.util.List catchClauses -> l
    org.mozilla.javascript.ast.AstNode finallyBlock -> m
    int finallyPosition -> n
    org.mozilla.javascript.ast.AstNode getTryBlock() -> r
    void setTryBlock(org.mozilla.javascript.ast.AstNode) -> a
    java.util.List getCatchClauses() -> s
    void setCatchClauses(java.util.List) -> a
    void addCatchClause(org.mozilla.javascript.ast.CatchClause) -> a
    org.mozilla.javascript.ast.AstNode getFinallyBlock() -> t
    void setFinallyBlock(org.mozilla.javascript.ast.AstNode) -> b
    void setFinallyPosition(int) -> g
org.mozilla.javascript.ast.UnaryExpression -> a.a.b.b.bb:
    org.mozilla.javascript.ast.AstNode operand -> j
    boolean isPostfix -> k
    void setOperator(int) -> g
    org.mozilla.javascript.ast.AstNode getOperand() -> r
    void setOperand(org.mozilla.javascript.ast.AstNode) -> a
    boolean isPostfix() -> s
    boolean isPrefix() -> t
org.mozilla.javascript.ast.VariableDeclaration -> a.a.b.b.bc:
    java.util.List variables -> j
    boolean isStatement -> k
    java.util.List getVariables() -> r
    void addVariable(org.mozilla.javascript.ast.VariableInitializer) -> a
    org.mozilla.javascript.Node setType(int) -> a
    void setIsStatement(boolean) -> a
org.mozilla.javascript.ast.VariableInitializer -> a.a.b.b.bd:
    org.mozilla.javascript.ast.AstNode target -> j
    org.mozilla.javascript.ast.AstNode initializer -> k
    boolean isDestructuring() -> r
    org.mozilla.javascript.ast.AstNode getTarget() -> s
    void setTarget(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getInitializer() -> t
    void setInitializer(org.mozilla.javascript.ast.AstNode) -> b
org.mozilla.javascript.ast.WhileLoop -> a.a.b.b.be:
    org.mozilla.javascript.ast.AstNode condition -> j
    org.mozilla.javascript.ast.AstNode getCondition() -> s
    void setCondition(org.mozilla.javascript.ast.AstNode) -> b
org.mozilla.javascript.ast.WithStatement -> a.a.b.b.bf:
    org.mozilla.javascript.ast.AstNode expression -> j
    org.mozilla.javascript.ast.AstNode statement -> k
    int lp -> l
    int rp -> m
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
    org.mozilla.javascript.ast.AstNode getStatement() -> s
    void setStatement(org.mozilla.javascript.ast.AstNode) -> b
    void setParens(int,int) -> d
org.mozilla.javascript.ast.XmlDotQuery -> a.a.b.b.bg:
    int rp -> m
    void setRp(int) -> h
org.mozilla.javascript.ast.XmlElemRef -> a.a.b.b.bh:
    org.mozilla.javascript.ast.AstNode indexExpr -> m
    int lb -> n
    int rb -> o
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
    void setBrackets(int,int) -> d
org.mozilla.javascript.ast.XmlExpression -> a.a.b.b.bi:
    org.mozilla.javascript.ast.AstNode expression -> j
    boolean isXmlAttribute -> k
    org.mozilla.javascript.ast.AstNode getExpression() -> r
    void setExpression(org.mozilla.javascript.ast.AstNode) -> a
    boolean isXmlAttribute() -> s
    void setIsXmlAttribute(boolean) -> a
org.mozilla.javascript.ast.XmlFragment -> a.a.b.b.bj:
org.mozilla.javascript.ast.XmlLiteral -> a.a.b.b.bk:
    java.util.List fragments -> j
    java.util.List getFragments() -> r
    void addFragment(org.mozilla.javascript.ast.XmlFragment) -> a
org.mozilla.javascript.ast.XmlMemberGet -> a.a.b.b.bl:
    org.mozilla.javascript.ast.XmlRef getMemberRef() -> t
org.mozilla.javascript.ast.XmlPropRef -> a.a.b.b.bm:
    org.mozilla.javascript.ast.Name propName -> m
    org.mozilla.javascript.ast.Name getPropName() -> r
    void setPropName(org.mozilla.javascript.ast.Name) -> a
org.mozilla.javascript.ast.XmlRef -> a.a.b.b.bn:
    org.mozilla.javascript.ast.Name namespace -> j
    int atPos -> k
    int colonPos -> l
    org.mozilla.javascript.ast.Name getNamespace() -> s
    void setNamespace(org.mozilla.javascript.ast.Name) -> b
    boolean isAttributeAccess() -> t
    void setAtPos(int) -> g
    void setColonPos(int) -> h
org.mozilla.javascript.ast.XmlString -> a.a.b.b.bo:
    java.lang.String xml -> j
    void setXml(java.lang.String) -> c
    java.lang.String getXml() -> r
org.mozilla.javascript.ast.Yield -> a.a.b.b.bp:
    org.mozilla.javascript.ast.AstNode value -> j
    org.mozilla.javascript.ast.AstNode getValue() -> r
    void setValue(org.mozilla.javascript.ast.AstNode) -> a
org.mozilla.javascript.debug.DebugFrame -> a.a.b.c.a:
    void onEnter(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    void onLineChange(org.mozilla.javascript.Context,int) -> a
    void onExceptionThrown(org.mozilla.javascript.Context,java.lang.Throwable) -> a
    void onExit(org.mozilla.javascript.Context,boolean,java.lang.Object) -> a
    void onDebuggerStatement(org.mozilla.javascript.Context) -> a
org.mozilla.javascript.debug.DebuggableScript -> a.a.b.c.b:
    int getFunctionCount() -> b
    org.mozilla.javascript.debug.DebuggableScript getFunction(int) -> b
org.mozilla.javascript.debug.Debugger -> a.a.b.c.c:
    void handleCompilationDone(org.mozilla.javascript.Context,org.mozilla.javascript.debug.DebuggableScript,java.lang.String) -> a
    org.mozilla.javascript.debug.DebugFrame getFrame(org.mozilla.javascript.Context,org.mozilla.javascript.debug.DebuggableScript) -> a
org.mozilla.javascript.json.JsonParser -> a.a.b.d.a:
    org.mozilla.javascript.Context cx -> a
    org.mozilla.javascript.Scriptable scope -> b
    int pos -> c
    int length -> d
    java.lang.String src -> e
    java.lang.Object parseValue(java.lang.String) -> a
    java.lang.Object readValue() -> a
    java.lang.Object readObject() -> b
    java.lang.Object readArray() -> c
    java.lang.String readString() -> d
    java.lang.Number readNumber(char) -> a
    java.lang.Boolean readTrue() -> e
    java.lang.Boolean readFalse() -> f
    java.lang.Object readNull() -> g
    void consumeWhitespace() -> h
    void consume(char) -> b
org.mozilla.javascript.json.JsonParser$ParseException -> a.a.b.d.b:
org.mozilla.javascript.optimizer.Block -> a.a.b.e.a:
    org.mozilla.javascript.optimizer.Block[] itsSuccessors -> a
    org.mozilla.javascript.optimizer.Block[] itsPredecessors -> b
    int itsStartNodeIndex -> c
    int itsEndNodeIndex -> d
    int itsBlockID -> e
    java.util.BitSet itsLiveOnEntrySet -> f
    java.util.BitSet itsLiveOnExitSet -> g
    java.util.BitSet itsUseBeforeDefSet -> h
    java.util.BitSet itsNotDefSet -> i
    void runFlowAnalyzes(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[]) -> a
    org.mozilla.javascript.optimizer.Block[] buildBlocks(org.mozilla.javascript.Node[]) -> a
    org.mozilla.javascript.optimizer.Block$FatBlock newFatBlock(int,int) -> a
    void reachingDefDataFlow(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[],org.mozilla.javascript.optimizer.Block[],int[]) -> a
    void typeFlow(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[],org.mozilla.javascript.optimizer.Block[],int[]) -> b
    boolean assignType(int[],int,int) -> a
    void markAnyTypeVariables(int[]) -> a
    void lookForVariableAccess(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node) -> a
    void initLiveOnEntrySets(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[]) -> b
    boolean doReachedUseDataFlow() -> a
    boolean updateEntrySet(java.util.BitSet,java.util.BitSet,java.util.BitSet,java.util.BitSet) -> a
    int findExpressionType(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[]) -> a
    boolean findDefPoints(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node,int[]) -> b
    boolean doTypeFlow(org.mozilla.javascript.optimizer.OptFunctionNode,org.mozilla.javascript.Node[],int[]) -> a
org.mozilla.javascript.optimizer.Block$1 -> a.a.b.e.b:
org.mozilla.javascript.optimizer.Block$FatBlock -> a.a.b.e.c:
    org.mozilla.javascript.ObjToIntMap successors -> b
    org.mozilla.javascript.ObjToIntMap predecessors -> c
    org.mozilla.javascript.optimizer.Block realBlock -> a
    org.mozilla.javascript.optimizer.Block[] reduceToArray(org.mozilla.javascript.ObjToIntMap) -> a
    void addSuccessor(org.mozilla.javascript.optimizer.Block$FatBlock) -> a
    void addPredecessor(org.mozilla.javascript.optimizer.Block$FatBlock) -> b
    org.mozilla.javascript.optimizer.Block[] getSuccessors() -> a
    org.mozilla.javascript.optimizer.Block[] getPredecessors() -> b
org.mozilla.javascript.optimizer.BodyCodegen -> a.a.b.e.d:
    org.mozilla.javascript.optimizer.BodyCodegen$ExceptionManager exceptionManager -> f
    org.mozilla.classfile.ClassFileWriter cfw -> a
    org.mozilla.javascript.optimizer.Codegen codegen -> b
    org.mozilla.javascript.CompilerEnvirons compilerEnv -> c
    org.mozilla.javascript.ast.ScriptNode scriptOrFn -> d
    int scriptOrFnIndex -> e
    int savedCodeOffset -> g
    org.mozilla.javascript.optimizer.OptFunctionNode fnCurrent -> h
    int[] locals -> i
    short firstFreeLocal -> j
    short localsMax -> k
    int itsLineNumber -> l
    boolean hasVarsInRegs -> m
    short[] varRegisters -> n
    boolean inDirectCallFunction -> o
    boolean itsForcedObjectParameters -> p
    int enterAreaStartLabel -> q
    int epilogueLabel -> r
    boolean inLocalBlock -> s
    short variableObjectLocal -> t
    short popvLocal -> u
    short contextLocal -> v
    short argsLocal -> w
    short operationLocal -> x
    short thisObjLocal -> y
    short funObjLocal -> z
    short itsZeroArgArray -> A
    short itsOneArgArray -> B
    short generatorStateLocal -> C
    boolean isGenerator -> D
    int generatorSwitch -> E
    int maxLocals -> F
    int maxStack -> G
    java.util.Map finallys -> H
    java.util.List literals -> I
    void generateBodyCode() -> a
    void generateGenerator() -> b
    void generateNestedFunctionInits() -> c
    void initBodyGeneration() -> d
    void generatePrologue() -> e
    void generateGetGeneratorResumptionPoint() -> f
    void generateSetGeneratorResumptionPoint(int) -> a
    void generateGetGeneratorStackState() -> g
    void generateEpilogue() -> h
    void generateGetGeneratorLocalsState() -> i
    void generateActivationExit() -> j
    void generateStatement(org.mozilla.javascript.Node) -> a
    void generateIntegerWrap() -> k
    void generateIntegerUnwrap() -> l
    void generateThrowJavaScriptException() -> m
    int getNextGeneratorState(org.mozilla.javascript.Node) -> b
    void generateExpression(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void generateYieldPoint(org.mozilla.javascript.Node,boolean) -> a
    void generateCheckForThrowOrClose(int,boolean,int) -> a
    void generateIfJump(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int) -> a
    void visitFunction(org.mozilla.javascript.optimizer.OptFunctionNode,int) -> a
    int getTargetLabel(org.mozilla.javascript.Node) -> c
    void visitGoto(org.mozilla.javascript.ast.Jump,int,org.mozilla.javascript.Node) -> a
    void addGotoWithReturn(org.mozilla.javascript.Node) -> d
    void generateArrayLiteralFactory(org.mozilla.javascript.Node,int) -> a
    void generateObjectLiteralFactory(org.mozilla.javascript.Node,int) -> b
    void visitArrayLiteral(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean) -> a
    void visitObjectLiteral(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean) -> b
    void visitSpecialCall(org.mozilla.javascript.Node,int,int,org.mozilla.javascript.Node) -> a
    void visitStandardCall(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
    void visitStandardNew(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> c
    void visitOptimizedCall(org.mozilla.javascript.Node,org.mozilla.javascript.optimizer.OptFunctionNode,int,org.mozilla.javascript.Node) -> a
    void generateCallArgArray(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean) -> c
    void generateFunctionAndThisObj(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> d
    void updateLineNumber(org.mozilla.javascript.Node) -> e
    void visitTryCatchFinally(org.mozilla.javascript.ast.Jump,org.mozilla.javascript.Node) -> a
    void generateCatchBlock(int,short,int,int,int) -> a
    java.lang.String exceptionTypeToName(int) -> b
    void inlineFinally(org.mozilla.javascript.Node,int,int) -> a
    void inlineFinally(org.mozilla.javascript.Node) -> f
    org.mozilla.javascript.Node getFinallyAtTarget(org.mozilla.javascript.Node) -> g
    boolean generateSaveLocals(org.mozilla.javascript.Node) -> h
    void visitSwitch(org.mozilla.javascript.ast.Jump,org.mozilla.javascript.Node) -> b
    void visitTypeofname(org.mozilla.javascript.Node) -> i
    void saveCurrentCodeOffset() -> n
    void addInstructionCount() -> o
    void addInstructionCount(int) -> c
    void visitIncDec(org.mozilla.javascript.Node) -> j
    boolean isArithmeticNode(org.mozilla.javascript.Node) -> k
    void visitArithmetic(org.mozilla.javascript.Node,int,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void visitBitOp(org.mozilla.javascript.Node,int,org.mozilla.javascript.Node) -> a
    int nodeIsDirectCallParameter(org.mozilla.javascript.Node) -> l
    boolean varIsDirectCallParameter(int) -> d
    void genSimpleCompare(int,int,int) -> a
    void visitIfJumpRelOp(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int) -> b
    void visitIfJumpEqOp(org.mozilla.javascript.Node,org.mozilla.javascript.Node,int,int) -> c
    void visitSetName(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> e
    void visitStrictSetName(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> f
    void visitSetConst(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> g
    void visitGetVar(org.mozilla.javascript.Node) -> m
    void visitSetVar(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean) -> d
    void visitSetConstVar(org.mozilla.javascript.Node,org.mozilla.javascript.Node,boolean) -> e
    void visitGetProp(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> h
    void visitSetProp(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void visitSetElem(int,org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> b
    void visitDotQuery(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> i
    int getLocalBlockRegister(org.mozilla.javascript.Node) -> n
    void dcpLoadAsNumber(int) -> e
    void dcpLoadAsObject(int) -> f
    void addGoto(org.mozilla.javascript.Node,int) -> c
    void addObjectToDouble() -> p
    void addNewObjectArray(int) -> g
    void addScriptRuntimeInvoke(java.lang.String,java.lang.String) -> a
    void addOptRuntimeInvoke(java.lang.String,java.lang.String) -> b
    void addJumpedBooleanWrap(int,int) -> a
    void addDoubleWrap() -> q
    short getNewWordPairLocal(boolean) -> a
    short getNewWordLocal(boolean) -> b
    short getNewWordLocal() -> r
    short getConsecutiveSlots(int,boolean) -> a
    void incReferenceWordLocal(short) -> a
    void decReferenceWordLocal(short) -> b
    void releaseWordLocal(short) -> c
    org.mozilla.javascript.Node access$000(org.mozilla.javascript.optimizer.BodyCodegen,org.mozilla.javascript.Node) -> a
    java.lang.String access$100(org.mozilla.javascript.optimizer.BodyCodegen,int) -> a
org.mozilla.javascript.optimizer.BodyCodegen$ExceptionManager -> a.a.b.e.e:
    java.util.LinkedList exceptionInfo -> b
    org.mozilla.javascript.optimizer.BodyCodegen this$0 -> a
    void pushExceptionInfo(org.mozilla.javascript.ast.Jump) -> a
    void addHandler(int,int,int) -> a
    void setHandlers(int[],int) -> a
    int removeHandler(int,int) -> a
    void popExceptionInfo() -> a
    void markInlineFinallyStart(org.mozilla.javascript.Node,int) -> a
    void markInlineFinallyEnd(org.mozilla.javascript.Node,int) -> b
    void endCatch(org.mozilla.javascript.optimizer.BodyCodegen$ExceptionManager$ExceptionInfo,int,int) -> a
    org.mozilla.javascript.optimizer.BodyCodegen$ExceptionManager$ExceptionInfo getTop() -> b
org.mozilla.javascript.optimizer.BodyCodegen$ExceptionManager$ExceptionInfo -> a.a.b.e.f:
    org.mozilla.javascript.ast.Jump node -> a
    org.mozilla.javascript.Node finallyBlock -> b
    int[] handlerLabels -> c
    int[] exceptionStarts -> d
    org.mozilla.javascript.Node currentFinally -> e
    org.mozilla.javascript.optimizer.BodyCodegen$ExceptionManager this$1 -> f
org.mozilla.javascript.optimizer.BodyCodegen$FinallyReturnPoint -> a.a.b.e.g:
    java.util.List jsrPoints -> a
    int tableLabel -> b
org.mozilla.javascript.optimizer.Codegen -> a.a.b.e.h:
    java.lang.Object globalLock -> d
    int globalSerialClassCounter -> e
    org.mozilla.javascript.CompilerEnvirons compilerEnv -> f
    org.mozilla.javascript.ObjArray directCallTargets -> g
    org.mozilla.javascript.ast.ScriptNode[] scriptOrFnNodes -> a
    org.mozilla.javascript.ObjToIntMap scriptOrFnIndexes -> h
    java.lang.String mainMethodClass -> i
    java.lang.String mainClassName -> b
    java.lang.String mainClassSignature -> c
    double[] itsConstantList -> j
    int itsConstantListSize -> k
    void captureStackInfo(org.mozilla.javascript.RhinoException) -> a
    java.lang.String getSourcePositionFromStack(org.mozilla.javascript.Context,int[]) -> a
    java.lang.String getPatchedStack(org.mozilla.javascript.RhinoException,java.lang.String) -> a
    void setEvalScriptFlag(org.mozilla.javascript.Script) -> a
    java.lang.Object compile(org.mozilla.javascript.CompilerEnvirons,org.mozilla.javascript.ast.ScriptNode,java.lang.String,boolean) -> a
    org.mozilla.javascript.Script createScriptObject(java.lang.Object,java.lang.Object) -> a
    org.mozilla.javascript.Function createFunctionObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Object) -> a
    java.lang.Class defineClass(java.lang.Object,java.lang.Object) -> b
    byte[] compileToClassFile(org.mozilla.javascript.CompilerEnvirons,java.lang.String,org.mozilla.javascript.ast.ScriptNode,java.lang.String,boolean) -> a
    java.lang.RuntimeException reportClassFileFormatException(org.mozilla.javascript.ast.ScriptNode,java.lang.String) -> a
    void transform(org.mozilla.javascript.ast.ScriptNode) -> g
    void initOptFunctions_r(org.mozilla.javascript.ast.ScriptNode) -> h
    void initScriptNodesData(org.mozilla.javascript.ast.ScriptNode) -> i
    void collectScriptNodes_r(org.mozilla.javascript.ast.ScriptNode,org.mozilla.javascript.ObjArray) -> a
    byte[] generateCode(java.lang.String) -> a
    void emitDirectConstructor(org.mozilla.classfile.ClassFileWriter,org.mozilla.javascript.optimizer.OptFunctionNode) -> a
    boolean isGenerator(org.mozilla.javascript.ast.ScriptNode) -> a
    void generateResumeGenerator(org.mozilla.classfile.ClassFileWriter) -> b
    void generateCallMethod(org.mozilla.classfile.ClassFileWriter) -> c
    void generateMain(org.mozilla.classfile.ClassFileWriter) -> d
    void generateExecute(org.mozilla.classfile.ClassFileWriter) -> e
    void generateScriptCtor(org.mozilla.classfile.ClassFileWriter) -> f
    void generateFunctionConstructor(org.mozilla.classfile.ClassFileWriter) -> g
    void generateFunctionInit(org.mozilla.classfile.ClassFileWriter,org.mozilla.javascript.optimizer.OptFunctionNode) -> b
    void generateNativeFunctionOverrides(org.mozilla.classfile.ClassFileWriter,java.lang.String) -> a
    void emitRegExpInit(org.mozilla.classfile.ClassFileWriter) -> h
    void emitConstantDudeInitializers(org.mozilla.classfile.ClassFileWriter) -> i
    void pushNumberAsObject(org.mozilla.classfile.ClassFileWriter,double) -> a
    void addDoubleWrap(org.mozilla.classfile.ClassFileWriter) -> j
    java.lang.String getStaticConstantWrapperType(double) -> a
    void pushUndefined(org.mozilla.classfile.ClassFileWriter) -> a
    int getIndex(org.mozilla.javascript.ast.ScriptNode) -> b
    java.lang.String getDirectCtorName(org.mozilla.javascript.ast.ScriptNode) -> c
    java.lang.String getBodyMethodName(org.mozilla.javascript.ast.ScriptNode) -> d
    java.lang.String cleanName(org.mozilla.javascript.ast.ScriptNode) -> e
    java.lang.String getBodyMethodSignature(org.mozilla.javascript.ast.ScriptNode) -> f
    java.lang.String getFunctionInitMethodName(org.mozilla.javascript.optimizer.OptFunctionNode) -> a
    java.lang.String getCompiledRegexpName(org.mozilla.javascript.ast.ScriptNode,int) -> a
    java.lang.RuntimeException badTree() -> a
org.mozilla.javascript.optimizer.OptFunctionNode -> a.a.b.e.i:
    org.mozilla.javascript.ast.FunctionNode fnode -> a
    boolean[] numberVarFlags -> d
    int directTargetIndex -> e
    boolean itsParameterNumberContext -> f
    boolean itsContainsCalls0 -> b
    boolean itsContainsCalls1 -> c
    org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ast.ScriptNode,int) -> a
    org.mozilla.javascript.optimizer.OptFunctionNode get(org.mozilla.javascript.ast.ScriptNode) -> a
    boolean isTargetOfDirectCall() -> a
    void setDirectTargetIndex(int) -> a
    void setParameterNumberContext(boolean) -> a
    boolean getParameterNumberContext() -> b
    int getVarCount() -> c
    boolean isParameter(int) -> b
    boolean isNumberVar(int) -> c
    void setIsNumberVar(int) -> d
    int getVarIndex(org.mozilla.javascript.Node) -> a
org.mozilla.javascript.optimizer.OptRuntime -> a.a.b.e.j:
    java.lang.Double zeroObj -> z
    java.lang.Double oneObj -> A
    java.lang.Double minusOneObj -> B
    java.lang.String encodeIntArray(int[]) -> a
org.mozilla.javascript.optimizer.OptTransformer -> a.a.b.e.k:
    java.util.Map possibleDirectCalls -> a
    org.mozilla.javascript.ObjArray directCallTargets -> b
    void visitNew(org.mozilla.javascript.Node,org.mozilla.javascript.ast.ScriptNode) -> a
    void visitCall(org.mozilla.javascript.Node,org.mozilla.javascript.ast.ScriptNode) -> b
    void detectDirectCall(org.mozilla.javascript.Node,org.mozilla.javascript.ast.ScriptNode) -> c
org.mozilla.javascript.optimizer.Optimizer -> a.a.b.e.l:
    boolean inDirectCallFunction -> b
    org.mozilla.javascript.optimizer.OptFunctionNode theFunction -> a
    boolean parameterUsedInNumberContext -> c
    void optimize(org.mozilla.javascript.ast.ScriptNode) -> a
    void optimizeFunction(org.mozilla.javascript.optimizer.OptFunctionNode) -> a
    void markDCPNumberContext(org.mozilla.javascript.Node) -> a
    boolean convertParameter(org.mozilla.javascript.Node) -> b
    int rewriteForNumberVariables(org.mozilla.javascript.Node,int) -> a
    void rewriteAsObjectChildren(org.mozilla.javascript.Node,org.mozilla.javascript.Node) -> a
    void buildStatementList_r(org.mozilla.javascript.Node,org.mozilla.javascript.ObjArray) -> a
org.mozilla.javascript.regexp.CompilerState -> a.a.b.f.a:
    org.mozilla.javascript.Context cx -> a
    char[] cpbegin -> b
    int cpend -> c
    int cp -> d
    int flags -> e
    int parenCount -> f
    int parenNesting -> g
    int classCount -> h
    int progLength -> i
    org.mozilla.javascript.regexp.RENode result -> j
org.mozilla.javascript.regexp.GlobData -> a.a.b.f.b:
    int mode -> a
    int optarg -> b
    boolean global -> c
    java.lang.String str -> d
    org.mozilla.javascript.Scriptable arrayobj -> e
    org.mozilla.javascript.Function lambda -> f
    java.lang.String repstr -> g
    int dollar -> h
    java.lang.StringBuilder charBuf -> i
    int leftIndex -> j
org.mozilla.javascript.regexp.NativeRegExp -> a.a.b.f.c:
    java.lang.Object REGEXP_TAG -> c
    org.mozilla.javascript.regexp.RECompiled re -> e
    double lastIndex -> a
    boolean $assertionsDisabled -> b
    java.lang.String getClassName() -> a
    java.lang.String getTypeOf() -> c
    java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.Scriptable compile(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> b
    java.lang.String toString() -> toString
    org.mozilla.javascript.regexp.RegExpImpl getImpl(org.mozilla.javascript.Context) -> a
    java.lang.String escapeRegExp(java.lang.Object) -> a
    java.lang.Object execSub(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],int) -> a
    org.mozilla.javascript.regexp.RECompiled compileRE(org.mozilla.javascript.Context,java.lang.String,java.lang.String,boolean) -> a
    boolean isDigit(char) -> a
    boolean isWord(char) -> b
    boolean isControlLetter(char) -> c
    boolean isLineTerm(char) -> d
    boolean isREWhiteSpace(int) -> f
    char upcase(char) -> e
    char downcase(char) -> f
    int toASCIIHexDigit(int) -> i
    boolean parseDisjunction(org.mozilla.javascript.regexp.CompilerState) -> a
    boolean parseAlternative(org.mozilla.javascript.regexp.CompilerState) -> b
    boolean calculateBitmapSize(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RENode,char[],int,int) -> a
    void doFlat(org.mozilla.javascript.regexp.CompilerState,char) -> a
    int getDecimalValue(char,org.mozilla.javascript.regexp.CompilerState,int,java.lang.String) -> a
    boolean parseTerm(org.mozilla.javascript.regexp.CompilerState) -> c
    void resolveForwardJump(byte[],int,int) -> a
    int getOffset(byte[],int) -> a
    int addIndex(byte[],int,int) -> b
    int getIndex(byte[],int) -> b
    int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode) -> a
    void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int) -> a
    org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData) -> a
    void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int) -> a
    void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int,int,int,int) -> a
    boolean flatNMatcher(org.mozilla.javascript.regexp.REGlobalData,int,int,java.lang.String,int) -> a
    boolean flatNIMatcher(org.mozilla.javascript.regexp.REGlobalData,int,int,java.lang.String,int) -> b
    boolean backrefMatcher(org.mozilla.javascript.regexp.REGlobalData,int,java.lang.String,int) -> a
    void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char) -> a
    void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char) -> a
    void processCharSet(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECharSet) -> a
    void processCharSetImpl(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECharSet) -> b
    boolean classMatcher(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECharSet,char) -> a
    boolean reopIsSimple(int) -> j
    int simpleMatch(org.mozilla.javascript.regexp.REGlobalData,java.lang.String,int,byte[],int,int,boolean) -> a
    boolean executeREBytecode(org.mozilla.javascript.regexp.REGlobalData,java.lang.String,int) -> a
    boolean matchRegExp(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECompiled,java.lang.String,int,int,boolean) -> a
    java.lang.Object executeRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int[],int) -> a
    int getFlags() -> g
    void reportWarning(org.mozilla.javascript.Context,java.lang.String,java.lang.String) -> a
    void reportError(java.lang.String,java.lang.String) -> a
    int getMaxInstanceId() -> b
    int findInstanceIdInfo(java.lang.String) -> a
    java.lang.String getInstanceIdName(int) -> b
    java.lang.Object getInstanceIdValue(int) -> c
    void setInstanceIdValue(int,java.lang.Object) -> a
    void initPrototypeId(int) -> d
    java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[]) -> a
    org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject) -> a
    int findPrototypeId(java.lang.String) -> b
org.mozilla.javascript.regexp.REBackTrackData -> a.a.b.f.d:
    org.mozilla.javascript.regexp.REBackTrackData previous -> a
    int op -> b
    int pc -> c
    int cp -> d
    int continuationOp -> e
    int continuationPc -> f
    long[] parens -> g
    org.mozilla.javascript.regexp.REProgState stateStackTop -> h
org.mozilla.javascript.regexp.RECharSet -> a.a.b.f.e:
    int length -> a
    int startIndex -> b
    int strlength -> c
    boolean sense -> d
    boolean converted -> e
    byte[] bits -> f
org.mozilla.javascript.regexp.RECompiled -> a.a.b.f.f:
    char[] source -> a
    int parenCount -> b
    int flags -> c
    byte[] program -> d
    int classCount -> e
    org.mozilla.javascript.regexp.RECharSet[] classList -> f
    int anchorCh -> g
org.mozilla.javascript.regexp.REGlobalData -> a.a.b.f.g:
    boolean multiline -> a
    org.mozilla.javascript.regexp.RECompiled regexp -> b
    int skipped -> c
    int cp -> d
    long[] parens -> e
    org.mozilla.javascript.regexp.REProgState stateStackTop -> f
    org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop -> g
    int parensIndex(int) -> a
    int parensLength(int) -> b
    void setParens(int,int,int) -> a
org.mozilla.javascript.regexp.RENode -> a.a.b.f.h:
    byte op -> a
    org.mozilla.javascript.regexp.RENode next -> b
    org.mozilla.javascript.regexp.RENode kid -> c
    org.mozilla.javascript.regexp.RENode kid2 -> d
    int parenIndex -> e
    int min -> f
    int max -> g
    int parenCount -> h
    boolean greedy -> i
    int startIndex -> j
    int kidlen -> k
    int bmsize -> l
    int index -> m
    boolean sense -> n
    char chr -> o
    int length -> p
    int flatIndex -> q
org.mozilla.javascript.regexp.REProgState -> a.a.b.f.i:
    org.mozilla.javascript.regexp.REProgState previous -> a
    int min -> b
    int max -> c
    int index -> d
    int continuationOp -> e
    int continuationPc -> f
    org.mozilla.javascript.regexp.REBackTrackData backTrack -> g
org.mozilla.javascript.regexp.RegExpImpl -> a.a.b.f.j:
    java.lang.String input -> a
    boolean multiline -> b
    org.mozilla.javascript.regexp.SubString[] parens -> c
    org.mozilla.javascript.regexp.SubString lastMatch -> d
    org.mozilla.javascript.regexp.SubString lastParen -> e
    org.mozilla.javascript.regexp.SubString leftContext -> f
    org.mozilla.javascript.regexp.SubString rightContext -> g
    boolean isRegExp(org.mozilla.javascript.Scriptable) -> a
    java.lang.Object compileRegExp(org.mozilla.javascript.Context,java.lang.String,java.lang.String) -> a
    org.mozilla.javascript.Scriptable wrapRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object) -> a
    java.lang.Object action(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],int) -> a
    java.lang.Object matchOrReplace(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.regexp.RegExpImpl,org.mozilla.javascript.regexp.GlobData,boolean) -> a
    int find_split(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.String,org.mozilla.javascript.Scriptable,int[],int[],boolean[],java.lang.String[][]) -> a
    org.mozilla.javascript.regexp.SubString getParenSubString(int) -> a
    void match_glob(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,int,org.mozilla.javascript.regexp.RegExpImpl) -> a
    void replace_glob(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,int,int) -> a
    org.mozilla.javascript.regexp.SubString interpretDollar(org.mozilla.javascript.Context,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int,int[]) -> a
    void do_replace(org.mozilla.javascript.regexp.GlobData,org.mozilla.javascript.Context,org.mozilla.javascript.regexp.RegExpImpl) -> a
    java.lang.Object js_split(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[]) -> a
    int find_split(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.String,int,org.mozilla.javascript.RegExpProxy,org.mozilla.javascript.Scriptable,int[],int[],boolean[],java.lang.String[][]) -> a
org.mozilla.javascript.regexp.SubString -> a.a.b.f.k:
    org.mozilla.javascript.regexp.SubString emptySubString -> a
    java.lang.String str -> b
    int index -> c
    int length -> d
    java.lang.String toString() -> toString
org.mozilla.javascript.v8dtoa.CachedPowers -> a.a.b.g.a:
    org.mozilla.javascript.v8dtoa.CachedPowers$CachedPower[] CACHED_POWERS -> a
    boolean $assertionsDisabled -> b
    int getCachedPower(int,int,int,org.mozilla.javascript.v8dtoa.DiyFp) -> a
org.mozilla.javascript.v8dtoa.CachedPowers$CachedPower -> a.a.b.g.b:
    long significand -> a
    short binaryExponent -> b
    short decimalExponent -> c
org.mozilla.javascript.v8dtoa.DiyFp -> a.a.b.g.c:
    long f -> b
    int e -> c
    boolean $assertionsDisabled -> a
    boolean uint64_gte(long,long) -> a
    void subtract(org.mozilla.javascript.v8dtoa.DiyFp) -> a
    org.mozilla.javascript.v8dtoa.DiyFp minus(org.mozilla.javascript.v8dtoa.DiyFp,org.mozilla.javascript.v8dtoa.DiyFp) -> a
    void multiply(org.mozilla.javascript.v8dtoa.DiyFp) -> b
    org.mozilla.javascript.v8dtoa.DiyFp times(org.mozilla.javascript.v8dtoa.DiyFp,org.mozilla.javascript.v8dtoa.DiyFp) -> b
    void normalize() -> a
    long f() -> b
    int e() -> c
    void setF(long) -> a
    void setE(int) -> a
    java.lang.String toString() -> toString
org.mozilla.javascript.v8dtoa.DoubleHelper -> a.a.b.g.d:
    boolean $assertionsDisabled -> a
    org.mozilla.javascript.v8dtoa.DiyFp asDiyFp(long) -> a
    org.mozilla.javascript.v8dtoa.DiyFp asNormalizedDiyFp(long) -> b
    int exponent(long) -> c
    long significand(long) -> d
    boolean isDenormal(long) -> e
    boolean isSpecial(long) -> f
    void normalizedBoundaries(long,org.mozilla.javascript.v8dtoa.DiyFp,org.mozilla.javascript.v8dtoa.DiyFp) -> a
org.mozilla.javascript.v8dtoa.FastDtoa -> a.a.b.g.e:
    boolean $assertionsDisabled -> a
    boolean roundWeed(org.mozilla.javascript.v8dtoa.FastDtoaBuilder,long,long,long,long,long) -> a
    long biggestPowerTen(int,int) -> a
    boolean uint64_lte(long,long) -> a
    boolean digitGen(org.mozilla.javascript.v8dtoa.DiyFp,org.mozilla.javascript.v8dtoa.DiyFp,org.mozilla.javascript.v8dtoa.DiyFp,org.mozilla.javascript.v8dtoa.FastDtoaBuilder,int) -> a
    boolean grisu3(double,org.mozilla.javascript.v8dtoa.FastDtoaBuilder) -> a
    boolean dtoa(double,org.mozilla.javascript.v8dtoa.FastDtoaBuilder) -> b
    java.lang.String numberToString(double) -> a
    boolean numberToString(double,org.mozilla.javascript.v8dtoa.FastDtoaBuilder) -> c
org.mozilla.javascript.v8dtoa.FastDtoaBuilder -> a.a.b.g.f:
    char[] chars -> a
    int end -> b
    int point -> c
    boolean formatted -> d
    char[] digits -> e
    void append(char) -> a
    void decreaseLast() -> a
    void reset() -> b
    java.lang.String toString() -> toString
    java.lang.String format() -> c
    void toFixedFormat(int,int) -> a
    void toExponentialFormat(int,int) -> b
org.mozilla.javascript.xml.XMLLib -> a.a.b.h.a:
    java.lang.Object XML_LIB_KEY -> a
    org.mozilla.javascript.xml.XMLLib extractFromScopeOrNull(org.mozilla.javascript.Scriptable) -> a
    org.mozilla.javascript.xml.XMLLib extractFromScope(org.mozilla.javascript.Scriptable) -> b
    boolean isXMLName(org.mozilla.javascript.Context,java.lang.Object) -> a
    org.mozilla.javascript.Ref nameRef(org.mozilla.javascript.Context,java.lang.Object,org.mozilla.javascript.Scriptable,int) -> a
    org.mozilla.javascript.Ref nameRef(org.mozilla.javascript.Context,java.lang.Object,java.lang.Object,org.mozilla.javascript.Scriptable,int) -> a
    java.lang.String escapeAttributeValue(java.lang.Object) -> a
    java.lang.String escapeTextValue(java.lang.Object) -> b
    java.lang.Object toDefaultXmlNamespace(org.mozilla.javascript.Context,java.lang.Object) -> b
org.mozilla.javascript.xml.XMLLib$Factory -> a.a.b.h.b:
    org.mozilla.javascript.xml.XMLLib$Factory create(java.lang.String) -> a
    java.lang.String getImplementationClassName() -> a
org.mozilla.javascript.xml.XMLLib$Factory$1 -> a.a.b.h.c:
    java.lang.String val$className -> a
    java.lang.String getImplementationClassName() -> a
org.mozilla.javascript.xml.XMLObject -> a.a.b.h.d:
    boolean has(org.mozilla.javascript.Context,java.lang.Object) -> b
    java.lang.Object get(org.mozilla.javascript.Context,java.lang.Object) -> c
    void put(org.mozilla.javascript.Context,java.lang.Object,java.lang.Object) -> a
    org.mozilla.javascript.Ref memberRef(org.mozilla.javascript.Context,java.lang.Object,int) -> b
    org.mozilla.javascript.Ref memberRef(org.mozilla.javascript.Context,java.lang.Object,java.lang.Object,int) -> a
    org.mozilla.javascript.NativeWith enterWith(org.mozilla.javascript.Scriptable) -> i
    org.mozilla.javascript.NativeWith enterDotQuery(org.mozilla.javascript.Scriptable) -> j
    java.lang.Object addValues(org.mozilla.javascript.Context,boolean,java.lang.Object) -> a
    java.lang.String getTypeOf() -> c
